{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/util.ts","../src/coordinate.ts","../src/props.ts","../src/mouse.ts","../src/scroll.ts","../src/clipboard.ts","../src/layout.ts","../src/style.ts","../src/render.ts","../src/sheet.tsx"],"sourcesContent":["import { XY, Rectangle, Selection, Clickable, Direction, Style } from './types';\n\nexport const INITIAL_MAX_SCROLL: XY = [ 2000, 1000 ];\n\nexport const ORIGIN: XY = [ 0, 0 ];\nexport const ONE_ONE: XY = [ 1, 1 ];\n\nexport const NO_CELL: XY = [ -1, -1 ];\nexport const NO_SELECTION: Rectangle = [NO_CELL, NO_CELL];\nexport const NO_SELECTIONS: Selection[] = [];\nexport const NO_CLICKABLES: Clickable[] = [];\nexport const NO_STYLE = {};\n\nexport const MAX_SEARCHABLE_INDEX = 65536;\nexport const MAX_XY: XY = [ MAX_SEARCHABLE_INDEX, MAX_SEARCHABLE_INDEX ];\n\nexport const COLORS = {\n    selectionBorder: '#1a66ff',\n    selectionBackground: '#e8f0ff',\n\n    gridLine: '#0000001f',\n\n    dragGhost: '#1a66ff30',\n    dropTarget: '#1a66ff',\n    knobAreaBorder: '#707070',\n\n    headerBackground: '#f6f9fc',\n    headerText: '#666666',\n    headerActive: '#e8f0ff',\n    headerActiveText: '#1a66ff',\n\n    headerSelected: '#1a66ff',\n    headerSelectedText: '#ffffff',\n};\n\nexport const SIZES = {\n    knobArea: 6,\n    headerWidth: 50,\n    headerHeight: 22,\n    minimumWidth: 50,\n    minimumHeight: 22,\n    resizeZone: 4,\n    scrollZone: 50,\n    scrollSpeed: 30,\n};\n\nexport const DEFAULT_CELL_STYLE: Required<Style> = {\n    textAlign: 'left',\n    fontSize: 12,\n    marginRight: 5,\n    marginLeft: 5,\n    color: '#000',\n    fontFamily: 'sans-serif',\n    weight: '',\n    fillColor: '',\n    backgroundColor: '',\n};\n\nexport const DEFAULT_COLUMN_HEADER_STYLE: Required<Style> = {\n    textAlign: 'center',\n    fontSize: 12,\n    marginRight: 5,\n    marginLeft: 5,\n    color: '#000',\n    fontFamily: 'sans-serif',\n    weight: '',\n    fillColor: '',\n    backgroundColor: '',\n};\n\nexport const HEADER_ACTIVE_STYLE = {\n    color: COLORS.headerActiveText,\n};\n\nexport const HEADER_SELECTED_STYLE = {\n    backgroundColor: COLORS.headerSelected,\n    color: COLORS.headerSelectedText,\n};\n\nexport const ARROW_KEYS: Record<string, Direction> = {\n    'ArrowRight': 'right',\n    'ArrowLeft': 'left',\n    'ArrowUp': 'up',\n    'ArrowDown': 'down',\n};\n","export const tail = <T,>(list: T[]): T => list[list.length - 1];\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(max, x), min);\n\nexport const seq = (n: number, s: number = 0, d: number = 1): number[] => Array.from({ length: n }).map((_, i: number) => s + d * i);\n\nexport const isInRange = (x: number, min: number, max: number) => min <= x && x <= max;\nexport const isInRangeLeft = (x: number, min: number, max: number) => min <= x && x < max;\nexport const isInRangeRight = (x: number, min: number, max: number) => min < x && x <= max;\nexport const isInRangeCenter = (x: number, min: number, max: number) => min < x && x < max;\n\n","import { XY, Rectangle } from './types';\nimport { clamp } from './util';\n\nexport const addXY = (a: XY, b: XY): XY => [a[0] + b[0], a[1] + b[1]];\nexport const subXY = (a: XY, b: XY): XY => [a[0] - b[0], a[1] - b[1]];\nexport const mulXY = (a: XY, b: XY): XY => [a[0] * b[0], a[1] * b[1]];\nexport const maxXY = (a: XY, b: XY): XY => [Math.max(a[0], b[0]), Math.max(a[1], b[1])];\nexport const minXY = (a: XY, b: XY): XY => [Math.min(a[0], b[0]), Math.min(a[1], b[1])];\nexport const clampXY = (p: XY, min: XY, max: XY = [Infinity, Infinity]): XY => [clamp(p[0], min[0], max[0]), clamp(p[1], min[1], max[1])];\n\nexport const getDirectionStep = (direction: string): XY => {\n    if (direction === 'left') return [-1, 0];\n    if (direction === 'right') return [1, 0];\n    if (direction === 'up') return [0, -1];\n    if (direction === 'down') return [0, 1];\n    return [0, 0];\n};\n\nexport const isSameXY = (a: XY, b: XY) => a[0] === b[0] && a[1] === b[1];\n\nexport const isSameSelection = (a: Rectangle, b: Rectangle) => {\n    const [a1, a2] = a;\n    const [b1, b2] = b;\n    return isSameXY(a1, b1) && isSameXY(a2, b2);\n};\n\n// Selection is infinite horizontally\nexport const isMaybeRowSelection = (selection: Rectangle) => {\n    const [[left], [right]] = selection;\n    return (left === -1 && right === -1);\n};\n\n// Selection is infinite vertically\nexport const isMaybeColumnSelection = (selection: Rectangle) => {\n    const [[, top], [, bottom]] = selection;\n    return (top === -1 && bottom === -1);\n};\n\n// Selection is ONLY infinite horizontally\nexport const isRowSelection = (selection: Rectangle) => {\n    const [[left, top], [right, bottom]] = selection;\n    return (left === -1 && right === -1) && (top !== -1 && bottom !== -1);\n};\n\n// Selection is ONLY infinite vertically\nexport const isColumnSelection = (selection: Rectangle) => {\n    const [[left, top], [right, bottom]] = selection;\n    return (top === -1 && bottom === -1) && (left !== -1 && right !== -1);\n};\n\n// Selection is not infinite\nexport const isCellSelection = (selection: Rectangle) => {\n    const [[left, top], [right, bottom]] = selection;\n    return (left !== -1 && right !== -1) && (top !== -1 && bottom !== -1);\n};\n\n// Selection is null\nexport const isEmptySelection = (selection: Rectangle) => {\n    const [[left, top], [right, bottom]] = selection;\n    return (left === -1 && right === -1) && (top === -1 && bottom === -1);\n};\n\n// Test cell inside selection (inclusive edges)\nexport const isPointInsideSelection = (selection: Rectangle, point: XY) => {\n    const [[left, top], [right, bottom]] = normalizeSelection(selection);\n    const [x, y] = point;\n    return (x >= left && x <= right) && (y >= top && y <= bottom);\n};\n\n// Normalize rectangle to min/max pair\nexport const normalizeSelection = (selection: Rectangle): Rectangle => {\n    let [[left, top], [right, bottom]] = selection;\n    if (left > right) {\n        [left, right] = [right, left];\n    }\n    if (top > bottom) {\n        [top, bottom] = [bottom, top];\n    }\n\n    return [[left, top], [right, bottom]];\n};\n","import { Direction, XY, CellContentType, CellProperty, CellPropertyFunction, PropTypes, RowOrColumnProperty, RowOrColumnPropertyFunction } from './types';\nimport { MAX_SEARCHABLE_INDEX, MAX_XY, ORIGIN } from './constants';\nimport { clampXY, addXY, subXY, maxXY, getDirectionStep } from './coordinate';\n\n// Inject row/column props from an array, function, constant or default value\nexport const createRowOrColumnProp = <T extends PropTypes>(\n    rowColProp: RowOrColumnProperty<T> | undefined,\n    defaultValue: T\n): RowOrColumnPropertyFunction<T> => {\n    if (Array.isArray(rowColProp)) {\n        return (rowOrColIndex: number) => {\n            if (rowOrColIndex >= 0 && rowOrColIndex < rowColProp.length) {\n                return rowColProp[rowOrColIndex];\n            } else {\n                return defaultValue;\n            }\n        };\n    } else if (typeof rowColProp === 'function') {\n        return rowColProp;\n    } else if (rowColProp !== null && rowColProp !== undefined) {\n        return () => rowColProp;\n    } else {\n        return () => defaultValue;\n    }\n}\n\n// Inject cell props from a nested array, function, constant or default value\nexport const createCellProp = <T extends PropTypes>(\n    cellProp: CellProperty<T> | undefined,\n    defaultValue: T\n): CellPropertyFunction<T> => {\n    if (Array.isArray(cellProp)) {\n        return (x: number, y: number) => {\n            if (y >= 0 && y < cellProp.length) {\n                if (x >= 0 && x < cellProp[y].length) {\n                    return cellProp[y][x];\n                } else {\n                    return defaultValue;\n                }\n            } else {\n                return defaultValue;\n            }\n        };\n    } else if (typeof cellProp === 'function') {\n        return cellProp;\n    } else if (cellProp !== null && cellProp !== undefined) {\n        return () => cellProp;\n    } else {\n        return () => defaultValue;\n    }\n}\n\nexport const findApproxMaxEditDataIndex = (editData: CellPropertyFunction<string>): XY => {\n    let x = 0;\n    let y = 0;\n    let howManyEmpty = 0;\n    let growthIncrement = 10;\n    let growthIncrementFactor = 1.5;\n\n    // x\n    while (howManyEmpty < 4) {\n        let allEmpty = true;\n        for (let yy = 0; yy < 10; yy++) {\n            const data = editData(x, yy);\n            if (data !== null && data !== undefined && data !== '') {\n                allEmpty = false;\n                break;\n            }\n        }\n        if (allEmpty) {\n            howManyEmpty += 1;\n        }\n        x += growthIncrement;\n        if (x > MAX_SEARCHABLE_INDEX) {\n            break;\n        }\n        growthIncrement = Math.floor(growthIncrement * growthIncrementFactor);\n    }\n\n    howManyEmpty = 0;\n    growthIncrement = 10;\n    growthIncrementFactor = 1.5;\n\n    // y\n    while (howManyEmpty < 4) {\n        let allEmpty = true;\n        for (let xx = 0; xx < 10; xx++) {\n            const data = editData(xx, y);\n            if (data !== null && data !== undefined && data !== '') {\n                allEmpty = false;\n                break;\n            }\n        }\n        if (allEmpty) {\n            howManyEmpty += 1;\n        }\n        y += growthIncrement;\n        if (y > MAX_SEARCHABLE_INDEX) {\n            break;\n        }\n        growthIncrement = Math.floor(growthIncrement * growthIncrementFactor);\n    }\n    return [x, y];\n}\n\nexport const findInDisplayData = (\n    displayData: CellPropertyFunction<CellContentType>,\n    start: XY,\n    direction: Direction,\n): XY => {\n    const step = getDirectionStep(direction);\n\n    let cell = clampXY(start, ORIGIN, MAX_XY);\n    const first = displayData(...addXY(cell, step));\n    const firstFilled = first !== '' && first !== null && first !== undefined;\n\n    if (!firstFilled) {\n        cell = addXY(cell, step);\n    }\n\n    let [cellX, cellY] = cell;\n    while (cellX <= MAX_SEARCHABLE_INDEX && cellY <= MAX_SEARCHABLE_INDEX && cellX >= 0 && cellY >= 0) {\n        const data = displayData(cellX, cellY);\n\n        // if first cell is filled, find the last filled cell, so first look for first unfilled\n        if (firstFilled && (data === '' || data === null || data === undefined)) {\n            return subXY(cell, step);\n        }\n        // if first cell is not filled, just find the first filled\n        if (!firstFilled && data !== '' && data !== null && data !== undefined) {\n            return cell;\n        }\n\n        [cellX, cellY] = cell = addXY(cell, step);\n    }\n\n    return maxXY(cell, [0, 0]);\n}\n","import { CellLayout, CellPropertyFunction, Change, Clickable, Rectangle, RowOrColumnPropertyFunction, SheetMouseEvent, SheetStyle, VisibleLayout, XY } from './types';\nimport { MouseEvent, PointerEvent, RefObject, useCallback, useMemo, useRef, useState } from 'react';\nimport { normalizeSelection, isColumnSelection, isRowSelection, isCellSelection, isMaybeRowSelection, isPointInsideSelection, addXY, subXY, maxXY } from './coordinate';\nimport { ONE_ONE, ORIGIN, SIZES } from './constants';\nimport { findApproxMaxEditDataIndex } from './props';\nimport { isInRange } from './util';\n\ntype DragOp = {\n    anchor: number,\n    scroll: number,\n    size: number,\n    indices: number[],\n};\n\nexport const useMouse = (\n    hitmapRef: RefObject<Clickable[]>,\n    selection: Rectangle,\n    knobArea: Rectangle | null,\n    editMode: boolean,\n    editData: CellPropertyFunction<string>,\n    sourceData: CellPropertyFunction<string | number | null>,\n\n    canSizeColumn: RowOrColumnPropertyFunction<boolean | null>,\n    canSizeRow: RowOrColumnPropertyFunction<boolean | null>,\n    canOrderColumn: RowOrColumnPropertyFunction<boolean | null>,\n    canOrderRow: RowOrColumnPropertyFunction<boolean | null>,\n\n    cellLayout: CellLayout,\n    visibleCells: VisibleLayout,\n    sheetStyle: SheetStyle,\n\n    onEdit?: (cell: XY) => void,\n    onCommit?: () => void,\n    onKnobAreaChange?: (knobArea: Rectangle | null) => void,\n    onDragOffsetChange?: (dragOffset: XY | null) => void,\n    onDropTargetChange?: (selection: Rectangle | null) => void,\n    onSelectionChange?: (selection: Rectangle, scrollTo?: boolean, toHead?: boolean) => void,\n\n    onInvalidateColumn?: (column: number) => void,\n    onInvalidateRow?: (row: number) => void,\n\n    onChange?: (changes: Change[]) => void,\n    onColumnOrderChange?: (indices: number[], order: number) => void,\n    onRowOrderChange?: (indices: number[], order: number) => void,\n    onCellWidthChange?: (indices: number[], value: number) => void,\n    onCellHeightChange?: (indices: number[], value: number) => void,\n    onRightClick?: (e: SheetMouseEvent) => void,\n\n    dontCommitEditOnSelectionChange?: boolean,\n) => {\n    const [hitTarget, setHitTarget] = useState<Clickable | null>(null);\n\n    const [columnResize, setColumnResize] = useState<DragOp | null>(null);\n    const [rowResize, setRowResize] = useState<DragOp | null>(null);\n    const [columnDrag, setColumnDrag] = useState<DragOp | null>(null);\n    const [rowDrag, setRowDrag] = useState<DragOp | null>(null);\n\n    const [draggingKnob, setDraggingKnob] = useState(false);\n    const [draggingSelection, setDraggingSelection] = useState(false);\n    const [draggingRowSelection, setDraggingRowSelection] = useState(false);\n    const [draggingColumnSelection, setDraggingColumnSelection] = useState(false);\n\n    const {hideRowHeaders, hideColumnHeaders} = sheetStyle;\n    const {cellToPixel, getVersion} = cellLayout;\n    const version = getVersion();\n\n    const knobPosition = useMemo((): XY | null => {\n        const [, [maxX, maxY]] = normalizeSelection(selection);\n        if (isRowSelection(selection)) {\n            return subXY(addXY(cellToPixel([0, maxY], [0, 1]), [SIZES.knobArea * 0.5, 0]), ONE_ONE);\n        }\n        if (isColumnSelection(selection)) {\n            return subXY(addXY(cellToPixel([maxX, 0], [1, 0]), [0, SIZES.knobArea * 0.5]), ONE_ONE);\n        }\n        if (isCellSelection(selection)) {\n            return subXY(cellToPixel([maxX, maxY], ONE_ONE), ONE_ONE);\n        }\n        return null;\n    }, [selection, cellToPixel, version]);\n\n    // Pass dragging state into handlers via ref so they don't need to rebind during resizes/drags\n    const refState = {\n        selection,\n        knobArea,\n        editMode,\n        editData,\n        sourceData,\n        cellLayout,\n        visibleCells,\n\n        knobPosition,\n        columnResize,\n        rowResize,\n        columnDrag,\n        rowDrag,\n\n        draggingKnob,\n        draggingSelection,\n        draggingRowSelection,\n        draggingColumnSelection,\n    };\n    const ref = useRef(refState);\n    ref.current = refState;\n\n    // Hit-testing for rendered objects\n    const getMousePosition = useCallback((e: PointerEvent<any> | MouseEvent<any>) => {\n        if (!e.target || !(e.target instanceof Element)) {\n            return null;\n        }\n\n        const rect = e.target.getBoundingClientRect();\n        const xy: XY = [\n            e.clientX - rect.left,\n            e.clientY - rect.top,\n        ];\n        return xy;\n    }, []);\n\n    const getScrollPosition = useCallback((e: PointerEvent<any> | MouseEvent<any>) => {\n        if (!e.target || !(e.target instanceof Element)) {\n            return [0, 0];\n        }\n\n        const {scrollLeft, scrollTop} = e.target as any;\n        const xy: XY = [scrollLeft, scrollTop];\n\n        return xy;\n    }, []);\n\n    const getMouseHit = useCallback((xy: XY) => {\n        const {current: hitmap} = hitmapRef;\n        if (!hitmap) return null;\n\n        for (const object of hitmap) {\n            const {rect} = object;\n            if (isPointInsideSelection(rect, xy)) {\n                return object;\n            }\n        }\n\n        return null;\n    }, [hitmapRef]);\n\n    const onPointerLeave = useCallback(() => {\n        window.document.body.style.cursor = 'auto';\n    }, []);\n\n    const onPointerDown = useCallback((e: PointerEvent<HTMLDivElement>) => {\n        const {\n            current: {\n                selection,\n                cellLayout: {columnToPixel, rowToPixel, pixelToCell, getIndentX, getIndentY},\n                visibleCells: {columns, rows},\n                knobPosition,\n            },\n        } = ref;\n\n        if (e.button !== 0) return;\n\n        (e.target as Element)?.setPointerCapture?.(e.pointerId);\n\n        const xy = getMousePosition(e);\n        if (!xy) return;\n\n        const [x, y] = xy;\n        const hitTarget = getMouseHit(xy);\n        if (hitTarget) {\n            setHitTarget(hitTarget);\n            return;\n        }\n\n        const [[minX, minY], [maxX, maxY]] = normalizeSelection(selection);\n\n        const selectedColumns = [];\n        const selectedRows = [];\n        for (let i = minX; i <= maxX; i++) selectedColumns.push(i);\n        for (let i = minY; i <= maxY; i++) selectedRows.push(i);\n\n        // Column header\n        if (!hideColumnHeaders && y < getIndentY()) {\n            // Grab selected columns in column selection\n            if (onColumnOrderChange) {\n                // Trim off start/end so resize works there\n                const start = columnToPixel(minX) + SIZES.resizeZone;\n                const end = columnToPixel(maxX, 1) - SIZES.resizeZone;\n                if (isInRange(x, start, end)) {\n\n                    for (const index of columns) {\n                        const start = columnToPixel(index, 0);\n                        const end = columnToPixel(index, 1);\n\n                        if (\n                            isColumnSelection(selection) &&\n                            isInRange(x, start, end) &&\n                            isInRange(index, minX, maxX) &&\n                            canOrderColumn(index)\n                        ) {\n                            window.document.body.style.cursor = 'grabbing';\n\n                            const indices = selectedColumns;\n                            const size = columnToPixel(maxX, 1) - columnToPixel(minX);\n                            const [scroll] = getScrollPosition(e);\n\n                            setColumnDrag({\n                                anchor: x,\n                                scroll,\n                                size,\n                                indices,\n                            });\n                            onDragOffsetChange?.([0, 0]);\n                            return;\n                        }\n                    }\n                }\n            }\n\n            // Resize columns\n            if (onCellWidthChange) {\n                for (const index of columns) {\n                    const edge = columnToPixel(index, 1);\n\n                    if ((Math.abs(edge - x) < SIZES.resizeZone) && canSizeColumn(index)) {\n                        window.document.body.style.cursor = 'col-resize';\n\n                        const asGroup = isColumnSelection(selection) && maxX === index;\n                        const indices = asGroup\n                            ? selectedColumns\n                            : [index];\n\n                        const size = asGroup\n                            ? columnToPixel(maxX, 1) - columnToPixel(minX)\n                            : columnToPixel(index, 1) - columnToPixel(index);\n                        const [scroll] = getScrollPosition(e);\n\n                        setColumnResize({\n                            anchor: x,\n                            scroll,\n                            size,\n                            indices,\n                        });\n                        return;\n                    }\n                }\n            }\n        }\n\n        if (!hideRowHeaders && x < getIndentX()) {\n            // Grab selected rows in row selection\n            if (onRowOrderChange) {\n                // Trim off start/end so resize works there\n                const start = rowToPixel(minY) + SIZES.resizeZone;\n                const end = rowToPixel(maxY, 1) - SIZES.resizeZone;\n                if (isInRange(y, start, end)) {\n\n                    for (const index of rows) {\n                        const start = rowToPixel(index, 0);\n                        const end = rowToPixel(index, 1);\n\n                        if (\n                            isRowSelection(selection) &&\n                            isInRange(y, start, end) &&\n                            isInRange(index, minY, maxY) &&\n                            canOrderRow(index)\n                        ) {\n                            window.document.body.style.cursor = 'grabbing';\n\n                            const indices = selectedRows;\n                            const size = rowToPixel(maxY, 1) - rowToPixel(minY);\n                            const [, scroll] = getScrollPosition(e);\n\n                            setRowDrag({\n                                anchor: y,\n                                scroll,\n                                size,\n                                indices,\n                            });\n                            onDragOffsetChange?.([0, 0]);\n                            return;\n                        }\n                    }\n                }\n            }\n\n            // Resize rows\n            if (onCellHeightChange) {\n                for (const index of rows) {\n                    const edge = rowToPixel(index, 1);\n\n                    if ((Math.abs(edge - y) < SIZES.resizeZone) && canSizeRow(index)) {\n                        window.document.body.style.cursor = 'row-resize';\n\n                        const asGroup = isRowSelection(selection) && maxY === index;\n                        const indices = asGroup\n                            ? selectedRows\n                            : [index];\n\n                        const size = asGroup\n                            ? rowToPixel(maxY, 1) - rowToPixel(minY)\n                            : rowToPixel(index, 1) - rowToPixel(index);\n                        const [, scroll] = getScrollPosition(e);\n\n                        setRowResize({\n                            anchor: y,\n                            scroll,\n                            size,\n                            indices,\n                        });\n                        return;\n                    }\n                }\n            }\n        }\n\n        // Knob drag mode\n        if (knobPosition) {\n            const [knobX, knobY] = knobPosition;\n            if (Math.abs(x - knobX) < SIZES.knobArea && Math.abs(y - knobY) < SIZES.knobArea) {\n                setDraggingKnob(true);\n                onKnobAreaChange?.(selection);\n                return;\n            }\n        }\n\n        // Normal cell click\n        const head = pixelToCell(xy);\n        const anchor: XY = e.shiftKey ? [...selection[0]] : head;\n\n        if (editMode) {\n            if (!dontCommitEditOnSelectionChange) {\n                onCommit?.();\n            }\n        }\n\n        let scrollTo = true;\n\n        if (!hideRowHeaders && x < getIndentX()) {\n            scrollTo = false;\n            setDraggingRowSelection(true);\n            anchor[0] = -1;\n            head[0] = -1;\n        }\n\n        if (!hideColumnHeaders && y < getIndentY()) {\n            scrollTo = false;\n            setDraggingColumnSelection(true);\n            anchor[1] = -1;\n            head[1] = -1;\n        }\n\n        setDraggingSelection(true);\n        onSelectionChange?.([anchor, head], scrollTo, true);\n    }, [\n        getMousePosition,\n        getScrollPosition,\n        getMouseHit,\n        onColumnOrderChange,\n        onRowOrderChange,\n        onCellWidthChange,\n        onCellHeightChange,\n        onKnobAreaChange,\n        onSelectionChange,\n        onCommit,\n        canSizeColumn,\n        canSizeRow,\n        canOrderColumn,\n        canOrderRow,\n    ]);\n\n    const onPointerUp = useCallback((e: PointerEvent<HTMLDivElement>) => {\n        const {\n            current: {\n                knobArea,\n                selection,\n                sourceData,\n                editData,\n\n                columnDrag,\n                rowDrag,\n\n                draggingKnob,\n\n                cellLayout: {pixelToColumn, pixelToRow, getIndentX, getIndentY},\n            },\n        } = ref;\n\n        if (knobArea && draggingKnob) {\n            const changes = parseKnobOperation(knobArea, selection, sourceData, editData);\n\n            onChange?.(changes);\n            onSelectionChange?.(knobArea, true, true);\n            onKnobAreaChange?.(null);\n        }\n\n        const xy = getMousePosition(e);\n        if (xy && (columnDrag || rowDrag)) {\n            window.document.body.style.cursor = 'auto';\n            onDragOffsetChange?.(null);\n            onDropTargetChange?.(null);\n\n            const [x, y] = xy;\n            const [[minX, minY], [maxX, maxY]] = normalizeSelection(selection);\n\n            const cellX = pixelToColumn(Math.max(x, getIndentX()), 0.5);\n            const cellY = pixelToRow(Math.max(y, getIndentY()), 0.5);\n\n            if (columnDrag) {\n                const {indices} = columnDrag;\n\n                const insideSelection = cellX >= minX && cellX <= maxX + 1;\n                if (!insideSelection) {\n                    const order = cellX > minX ? cellX - indices.length : cellX;\n                    onSelectionChange?.([[order, minY], [order + maxX - minX, maxY]]);\n                    onColumnOrderChange?.(indices, order);\n                    onInvalidateColumn?.(Math.min(minX, order));\n                }\n            }\n            if (rowDrag) {\n                const {indices} = rowDrag;\n\n                const insideSelection = cellY >= minY && cellY <= maxY + 1;\n                if (!insideSelection) {\n                    const order = cellY > minY ? cellY - indices.length : cellY;\n                    onSelectionChange?.([[minX, order], [maxX, order + maxY - minY]]);\n                    onRowOrderChange?.(indices, order);\n                    onInvalidateRow?.(Math.min(minY, order));\n                }\n            }\n        }\n\n        setDraggingSelection(false);\n        setDraggingRowSelection(false);\n        setDraggingColumnSelection(false);\n        setDraggingKnob(false);\n        setColumnResize(null);\n        setColumnDrag(null);\n        setRowResize(null);\n        setRowDrag(null);\n\n        if (!xy || !hitTarget) return;\n        setHitTarget(null);\n\n        if (hitTarget === getMouseHit(xy)) {\n            const {obj} = hitTarget;\n            obj.onClick?.(e);\n        }\n\n    }, [\n        getMousePosition,\n        getMouseHit,\n        onChange,\n        onSelectionChange,\n        onKnobAreaChange,\n        onDropTargetChange,\n        onColumnOrderChange,\n        onRowOrderChange,\n    ]);\n\n    const onPointerMove = useCallback((e: PointerEvent<HTMLDivElement>) => {\n        const {\n            current: {\n                selection,\n                visibleCells,\n\n                knobPosition,\n                columnResize,\n                columnDrag,\n                rowResize,\n                rowDrag,\n\n                draggingKnob,\n                draggingSelection,\n                draggingColumnSelection,\n                draggingRowSelection,\n\n                cellLayout: {columnToPixel, rowToPixel, pixelToCell, pixelToColumn, pixelToRow, getIndentX, getIndentY},\n            },\n        } = ref;\n\n        const xy = getMousePosition(e);\n        if (!xy) return;\n\n        window.document.body.style.cursor = 'auto';\n\n        const hitTarget = getMouseHit(xy);\n        if (hitTarget) {\n            window.document.body.style.cursor = 'pointer';\n        }\n        else if (columnDrag || rowDrag) {\n            window.document.body.style.cursor = 'grabbing';\n        }\n        else if (columnResize) {\n            window.document.body.style.cursor = 'col-resize';\n            e.preventDefault();\n        }\n        else if (rowResize) {\n            window.document.body.style.cursor = 'row-resize';\n            e.preventDefault();\n        }\n        else if (draggingRowSelection || draggingColumnSelection) {\n            e.preventDefault();\n        }\n\n        const {columns, rows} = visibleCells;\n        const [x, y] = xy;\n        const [[minX, minY], [maxX, maxY]] = normalizeSelection(selection);\n\n        const isDragging = columnResize || columnDrag || rowResize || rowDrag || draggingRowSelection || draggingColumnSelection;\n\n        if (!isDragging) {\n            if (!hideColumnHeaders && y < getIndentY()) {\n                if (onColumnOrderChange) {\n                    // Trim off start/end so resize works there\n                    const start = columnToPixel(minX) + SIZES.resizeZone;\n                    const end = columnToPixel(maxX, 1) - SIZES.resizeZone;\n                    if (isInRange(x, start, end)) {\n\n                        for (const index of columns) {\n                            const start = columnToPixel(index);\n                            const end = columnToPixel(index, 1);\n\n                            if (\n                                !draggingColumnSelection &&\n                                isColumnSelection(selection) &&\n                                isInRange(x, start, end) &&\n                                isInRange(index, minX, maxX) &&\n                                canOrderColumn(index)\n                            ) {\n                                window.document.body.style.cursor = 'grab';\n                                return;\n                            }\n                        }\n                    }\n                }\n                if (onCellWidthChange) {\n                    for (const index of columns) {\n                        const edge = columnToPixel(index, 1);\n                        if ((Math.abs(edge - x) < SIZES.resizeZone) && canSizeColumn(index)) {\n                            window.document.body.style.cursor = 'col-resize';\n                            return;\n                        }\n                    }\n                }\n            }\n\n            if (!hideRowHeaders && x < getIndentX()) {\n                if (onRowOrderChange) {\n                    // Trim off start/end so resize works there\n                    const start = rowToPixel(minY) + SIZES.resizeZone;\n                    const end = rowToPixel(maxY, 1) - SIZES.resizeZone;\n                    if (isInRange(y, start, end)) {\n\n                        for (const index of rows) {\n                            const start = rowToPixel(index);\n                            const end = rowToPixel(index, 1);\n\n                            if (\n                                !draggingRowSelection &&\n                                isRowSelection(selection) &&\n                                isInRange(y, start, end) &&\n                                isInRange(index, minY, maxY) &&\n                                canOrderRow(index)\n                            ) {\n                                window.document.body.style.cursor = 'grab';\n                                return;\n                            }\n                        }\n                    }\n                }\n                if (onCellHeightChange) {\n                    for (const index of rows) {\n                        const edge = rowToPixel(index, 1);\n                        if ((Math.abs(edge - y) < SIZES.resizeZone) && canSizeRow(index)) {\n                            window.document.body.style.cursor = 'row-resize';\n                            return;\n                        }\n                    }\n                }\n            }\n\n            if (knobPosition) {\n                const [knobX, knobY] = knobPosition;\n                if (Math.abs(x - knobX) < SIZES.knobArea && Math.abs(y - knobY) < SIZES.knobArea) {\n                    window.document.body.style.cursor = 'crosshair';\n                    return;\n                }\n            }\n        }\n\n        if (columnResize) {\n            if (onCellWidthChange) {\n                const {size, anchor, scroll, indices} = columnResize;\n                const [currentScroll] = getScrollPosition(e);\n                const newWidth = Math.max(size + x - anchor + scroll - currentScroll, SIZES.minimumWidth * indices.length);\n                onInvalidateColumn?.(indices[0] - 1);\n                onCellWidthChange(indices, newWidth / indices.length);\n            }\n            return;\n        }\n\n        if (rowResize) {\n            if (onCellHeightChange) {\n                const {size, anchor, scroll, indices} = rowResize;\n                const [, currentScroll] = getScrollPosition(e);\n                const newHeight = Math.max(size + y - anchor + scroll - currentScroll, SIZES.minimumHeight * indices.length);\n                onInvalidateRow?.(indices[0] - 1);\n                onCellHeightChange(indices, newHeight / indices.length);\n            }\n            return;\n        }\n\n        if (draggingSelection) {\n            const [anchor] = selection;\n            const head = pixelToCell(xy);\n\n            const [anchorX, anchorY] = anchor;\n            const [headX, headY] = head;\n\n            if (draggingRowSelection) {\n                onSelectionChange?.([[-1, anchorY], [-1, Math.max(0, headY)]], false);\n            } else if (draggingColumnSelection) {\n                onSelectionChange?.([[anchorX, -1], [Math.max(0, headX), -1]], false);\n            } else {\n                onSelectionChange?.([\n                    maxXY(anchor, ORIGIN),\n                    maxXY(head, ORIGIN),\n                ], false);\n            }\n        }\n\n        if (draggingKnob) {\n            window.document.body.style.cursor = 'crosshair';\n\n            const [cellX, cellY] = pixelToCell(xy);\n            let [[minX, minY], [maxX, maxY]] = normalizeSelection(selection);\n\n            // check if vertical or horizontal\n            let xCellDiff = Math.min(cellX - minX, maxX - cellX, 0); // zero or less\n            let yCellDiff = Math.min(cellY - minY, maxY - cellY, 0); // zero or less\n\n            if (isMaybeRowSelection(selection) || xCellDiff > yCellDiff) {\n                if (cellY < minY) {\n                    minY = cellY;\n                } else if (cellY > maxY) {\n                    maxY = cellY;\n                }\n            } else {\n                if (cellX < minX) {\n                    minX = cellX;\n                } else if (cellX > maxX) {\n                    maxX = cellX;\n                }\n            }\n\n            onKnobAreaChange?.([[minX, minY], [maxX, maxY]]);\n        }\n\n        if (columnDrag || rowDrag) {\n            const [x, y] = xy;\n            if (columnDrag) {\n                const cellX = pixelToColumn(Math.max(x, getIndentX()), 0.5);\n                const insideSelection = cellX >= minX && cellX <= maxX + 1;\n\n                const {anchor, scroll} = columnDrag;\n                const shift = x - anchor;\n                const [currentScroll] = getScrollPosition(e);\n\n                onDragOffsetChange?.([shift + currentScroll - scroll, 0]);\n                onDropTargetChange?.(insideSelection ? null : [[cellX, -1], [cellX, -1]]);\n            }\n            if (rowDrag) {\n                const cellY = pixelToRow(Math.max(y, getIndentY()), 0.5);\n                const insideSelection = cellY >= minY && cellY <= maxY + 1;\n\n                const {anchor, scroll} = rowDrag;\n                const shift = y - anchor;\n                const [, currentScroll] = getScrollPosition(e);\n\n                onDragOffsetChange?.([0, shift + currentScroll - scroll]);\n                onDropTargetChange?.(insideSelection ? null : [[-1, cellY], [-1, cellY]]);\n            }\n        }\n    }, [\n        getMousePosition,\n        getScrollPosition,\n        getMouseHit,\n        onCellWidthChange,\n        onCellHeightChange,\n    ]);\n\n    const onDoubleClick = useCallback((e: MouseEvent) => {\n        const {\n            current: {\n                cellLayout: {pixelToCell},\n            },\n        } = ref;\n\n        e.preventDefault();\n        if (e.shiftKey) return;\n\n        const xy = getMousePosition(e);\n        if (!xy) return;\n\n        const hitTarget = getMouseHit(xy);\n        if (hitTarget) {\n            window.document.body.style.cursor = 'pointer';\n            return;\n        }\n\n        const editCell = pixelToCell(xy);\n        if (editMode) onCommit?.();\n        onEdit?.(editCell);\n    }, [getMousePosition, getMouseHit, onCommit, onEdit]);\n\n    const onContextMenu = useCallback((e: MouseEvent) => {\n        const {\n            current: {\n                cellLayout: {pixelToCell, getIndentX, getIndentY},\n            },\n        } = ref;\n\n        const xy = getMousePosition(e);\n        if (!xy) return;\n\n        const [x, y] = xy;\n        if (x <= getIndentX() || y <= getIndentY()) {\n            return;\n        }\n\n        // If click is not inside of selection, select the right clicked cell\n        const cell = pixelToCell(xy);\n        if (!isPointInsideSelection(selection, cell)) {\n            onSelectionChange?.([cell, cell]);\n        }\n\n        onPointerMove(e as any);\n\n        const [cellX, cellY] = cell;\n        const event: SheetMouseEvent = {\n            ...e,\n            cellX,\n            cellY,\n        };\n        onRightClick?.(event);\n    }, [getMousePosition, onSelectionChange, onPointerMove, onRightClick]);\n\n    const mouseHandlers = {\n        onPointerLeave,\n        onPointerDown,\n        onPointerMove,\n        onPointerUp,\n        onDoubleClick,\n        onContextMenu,\n    };\n\n    return {knobPosition, mouseHandlers};\n};\n\nconst parseKnobOperation = (\n    knobArea: Rectangle,\n    selection: Rectangle,\n    sourceData: CellPropertyFunction<string | number | null>,\n    editData: CellPropertyFunction<string>,\n): Change[] => {\n    const [[kx1, ky1], [kx2, ky2]] = normalizeSelection(knobArea);\n    const [[sx1, sy1], [sx2, sy2]] = normalizeSelection(selection);\n\n    let fx1 = kx1;\n    let fy1 = ky1;\n    let fx2 = kx2;\n    let fy2 = ky2;\n\n    const changes: Change[] = [];\n\n    // TODO: this should be made less cryptic, using logical selection ops/fns\n\n    if (fx2 - fx1 === sx2 - sx1) {\n        // vertical\n        if (fy1 === sy1) {\n            fy1 = sy2 + 1;\n        } else {\n            fy2 = sy1 - 1;\n        }\n        if (fx1 === -1 && fx2 === -1) {\n            const [maxX] = findApproxMaxEditDataIndex(editData);\n            fx1 = 0;\n            fx2 = maxX;\n        }\n        let srcY = sy1;\n        for (let y = fy1; y <= fy2; y++) {\n            for (let x = fx1; x <= fx2; x++) {\n                const value = sourceData(x, srcY);\n                changes.push({ x: x, y: y, value: value, source: { x: x, y: srcY } });\n            }\n            srcY = srcY + 1;\n            if (srcY > sy2) {\n                srcY = sy1;\n            }\n        }\n    } else {\n        // horizontal\n        if (fx1 === sx1) {\n            fx1 = sx2 + 1;\n        } else {\n            fx2 = sx1 - 1;\n        }\n        if (fy1 === -1 && fy2 === -1) {\n            const [, maxY] = findApproxMaxEditDataIndex(editData);\n            fy1 = 0;\n            fy2 = maxY;\n        }\n        let srcX = sx1;\n        for (let x = fx1; x <= fx2; x++) {\n            for (let y = fy1; y <= fy2; y++) {\n                const value = sourceData(srcX, y);\n                changes.push({ x: x, y: y, value: value, source: { x: srcX, y: y } });\n            }\n            srcX = srcX + 1;\n            if (srcX > sx2) {\n                srcX = sx1;\n            }\n        }\n    }\n\n    return changes;\n}","import { UIEvent, useCallback } from 'react';\nimport { XY, CellLayout } from './types';\nimport { isSameXY, maxXY, mulXY } from './coordinate';\nimport { ONE_ONE } from './constants';\n\nexport const useScroll = (\n    offset: XY,\n    maxScroll: XY,\n    cellLayout: CellLayout,\n    onOffsetChange?: (offset: XY) => void,\n    onMaxScrollChange?: (maxScroll: XY) => void,\n) => {\n    return useCallback((e: UIEvent) => {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const {absoluteToCell, cellToAbsolute} = cellLayout;\n\n        // Zero scroll position is considered in the center of the top/left cell\n        const [nudgeX, nudgeY] = cellToAbsolute([0, 0], [0.5, 0.5]);\n\n        const xy: XY = [\n            e.target.scrollLeft + nudgeX,\n            e.target.scrollTop + nudgeY,\n        ];\n\n        const cell = absoluteToCell(xy);\n        if (!isSameXY(cell, offset)) {\n            onOffsetChange?.(cell);\n        }\n\n        // TODO: smooth scrolling\n        // const pixel = subXY(cellToAbsolute(cell), xy);\n        //if (!isSameXY(pixel, pixelOffset)) {\n        //     setPixelOffset(pixel);\n        //}\n\n        const [x, y] = xy;\n        const [maxScrollX, maxScrollY] = maxScroll;\n        const growX = (maxScrollX < x + 1) ? 1.5 : 1;\n        const growY = (maxScrollY < y + 1) ? 1.5 : 1;\n        if (growX > 1 || growY > 1) {\n            onMaxScrollChange?.(mulXY(maxScroll, [growX, growY]));\n        }\n    }, [cellLayout, onOffsetChange, onMaxScrollChange]);\n};\n\nexport const scrollToCell = (\n    element: HTMLDivElement,\n    cell: XY,\n    view: XY,\n    freeze: XY,\n    offset: XY,\n    maxScroll: XY,\n    cellLayout: CellLayout,\n    callback: (offset: XY, maxScroll: XY) => void,\n) => {\n    const [x, y] = cell;\n    const [w, h] = view;\n    const [offsetX, offsetY] = offset;\n\n    const {cellToAbsolute, cellToPixel, columnToPixel, rowToPixel} = cellLayout;\n    const [frozenX, frozenY] = cellToAbsolute(freeze);\n    const [left, top] = cellToPixel(cell);\n    const [right, bottom] = cellToPixel(cell, ONE_ONE);\n\n    let [newX, newY] = offset;\n    \n    // If moving left/up, scroll to head\n    if (left <= frozenX) {\n        newX = x - freeze[0];\n    }\n    if (top <= frozenY) {\n        newY = y - freeze[1];\n    }\n\n    // If moving right/down, scroll cell by cell until right/bottom of cell is visible\n    if (right > w) {\n        let edge = right - w + columnToPixel(newX);\n        while (columnToPixel(++newX) < edge) {};\n    }\n    if (bottom > h) {\n        let edge = bottom - h + rowToPixel(newY);\n        while (rowToPixel(++newY) < edge) {};\n    }\n\n    // Don't scroll on infinite axis\n    const newOffset: XY = [\n        newX >= 0 ? newX : offsetX,\n        newY >= 0 ? newY : offsetY,\n    ];\n\n    if (!isSameXY(newOffset, offset)) {\n        const scroll = cellToAbsolute(newOffset);\n        const [nudgeX, nudgeY] = cellToAbsolute([0, 0], [0.5, 0.5]);\n\n        callback(newOffset, maxXY(maxScroll, scroll));\n        setTimeout(() => {\n            const [scrollX, scrollY] = scroll;\n            element.scrollLeft = scrollX - nudgeX;\n            element.scrollTop = scrollY - nudgeY;\n        });\n    }\n};\n","import { CellPropertyFunction, Change, ParsedChange, Rectangle } from './types';\nimport { RefObject, useLayoutEffect, useEffect } from 'react';\nimport { findApproxMaxEditDataIndex } from './props';\nimport { normalizeSelection, isMaybeRowSelection, isMaybeColumnSelection, isEmptySelection } from './coordinate';\n\nexport const useClipboardCopy = (\n    textAreaRef: RefObject<HTMLTextAreaElement>,\n    selection: Rectangle,\n    editMode: boolean,\n    editData: CellPropertyFunction<string>,\n) => {\n    useLayoutEffect(() => {\n        const {current: textArea} = textAreaRef;\n        if (!textArea) return;\n\n        if (editMode) return;\n        if (isEmptySelection(selection)) return;\n\n        let v = formatSelectionAsTSV(selection, editData);\n\n        // Bizarre: having only TAB/RETURN characters inside the textarea\n        // prevents native auto-scroll. Also bizarre: auto-scroll doesn't work\n        // if we don't focus the textarea at all.\n        if (v.match(/^[\\t\\n]*$/)) { v = ' ' + v; }\n        textArea.value = v;\n    }, [selection, editMode, editData, textAreaRef]);\n\n    useLayoutEffect(() => {\n        const {current: textArea} = textAreaRef;\n        if (!textArea) return;\n\n        const focus = () => {\n            textArea.focus({ preventScroll: true });\n            textArea.select();\n        };\n\n        if (editMode) return;\n        if (document.activeElement === textArea) return;\n\n        const activeTagName = (document as any).activeElement.tagName.toLowerCase();\n        if (\n            !(\n                (activeTagName === 'div' && (document as any).activeElement.contentEditable === 'true') ||\n                activeTagName === 'input' ||\n                activeTagName === 'textarea' ||\n                activeTagName === 'select'\n            )\n        ) {\n            focus();\n        }\n    });\n}\n\nexport const useClipboardPaste = (\n    textAreaRef: RefObject<HTMLTextAreaElement>,\n    selection: Rectangle,\n    onSelectionChange?: (selection: Rectangle) => void,\n    onChange?: (changes: Array<Change>) => void,\n) => {\n    useEffect(() => {\n        const onPaste = (e: any) => {\n            const {current: textArea} = textAreaRef;\n            if (!textArea) return;\n\n            if (e.target !== textArea) return;\n            e.preventDefault();\n\n            const clipboardData = e.clipboardData || (window as any).clipboardData;\n            const types = clipboardData.types;\n\n            let parsed;\n            if (types.includes('text/html')) {\n                const pastedHtml = clipboardData.getData('text/html');\n                parsed = parsePastedHtml(selection, pastedHtml);\n            } else if (types.includes('text/plain')) {\n                const text = clipboardData.getData('text/plain');\n                parsed = parsePastedText(selection, text);\n            }\n            if (!parsed) return;\n\n            const {selection: s, changes} = parsed;\n            onChange?.(changes);\n            onSelectionChange?.(s);\n        };\n\n        window.document.addEventListener('paste', onPaste);\n        return () => {\n            window.document.removeEventListener('paste', onPaste);\n        };\n    }, [textAreaRef, selection]);\n}\n\nconst formatTSV = (rows: string[][]) => rows.map(row => row.join('\\t')).join('\\n');\n\nconst formatSelectionAsTSV = (\n    selection: Rectangle,\n    editData: CellPropertyFunction<string>,\n) => {\n    if (isEmptySelection(selection)) return '';\n\n    let [[minX, minY], [maxX, maxY]] = normalizeSelection(selection);\n    if (isMaybeRowSelection(selection)) {\n        const [cellX] = findApproxMaxEditDataIndex(editData);\n        minX = 0;\n        maxX = cellX;\n    }\n    if (isMaybeColumnSelection(selection)) {\n        const [, cellY] = findApproxMaxEditDataIndex(editData);\n        minY = 0;\n        maxY = cellY;\n    }\n\n    const rows: string[][] = [];\n\n    for (let y = minY; y <= maxY; y++) {\n        const row: string[] = [];\n\n        for (let x = minX; x <= maxX; x++) {\n            const value = editData(x, y);\n            if (value !== null && value !== undefined) {\n                row.push(value != null ? value : '');\n            }\n        }\n\n        rows.push(row);\n    }\n\n    return formatTSV(rows);\n}\n\nconst findTable = (element: any): any => {\n    for (const child of element.children) {\n        if (child.nodeName === 'TABLE') {\n            return child;\n        }\n        const maybeTable = findTable(child);\n        if (maybeTable) {\n            return maybeTable;\n        }\n    }\n};\n\nconst parsePastedHtml = (selection: Rectangle, html: string): ParsedChange | null => {\n    const div = document.createElement('div');\n    div.innerHTML = html.trim();\n\n    const [[minX, minY]] = normalizeSelection(selection);\n    let left = isMaybeRowSelection(selection) ? 0 : minX;\n    let top = isMaybeColumnSelection(selection) ? 0 : minY;\n\n    const changes = [];\n\n    const tableNode = findTable(div);\n    if (!tableNode) {\n        return null;\n    }\n\n    let right = left;\n    let bottom = top;\n\n    let y = top;\n    for (const tableChild of tableNode.children) {\n        if (tableChild.nodeName === 'TBODY') {\n            for (const tr of tableChild.children) {\n                let x = left;\n                if (tr.nodeName === 'TR') {\n                    for (const td of tr.children) {\n                        if (td.nodeName === 'TD') {\n                            let str: string = '';\n                            if (td.children.length !== 0 && td.children[0].nodeName === 'P') {\n                                const p = td.children[0];\n                                if (p.children.length !== 0 && p.children[0].nodeName === 'FONT') {\n                                    str = p.children[0].textContent.trim();\n                                } else {\n                                    str = p.textContent.trim();\n                                }\n                            } else {\n                                str = td.textContent.trim();\n                            }\n                            str = str.replaceAll('\\n', '');\n                            str = str.replaceAll(/\\s\\s+/g, ' ');\n                            changes.push({ x, y, value: str });\n                            x++;\n                        }\n                    }\n                    y++;\n                }\n                right = Math.max(right, x - 1);\n            }\n        }\n    }\n    bottom = Math.max(top, y - 1);\n\n    return {\n        selection: [[left, top], [right, bottom]],\n        changes,\n    };\n};\n\nconst parsePastedText = (selection: Rectangle, text: string): ParsedChange => {\n    const [[minX, minY]] = normalizeSelection(selection);\n    let left = isMaybeRowSelection(selection) ? 0 : minX;\n    let top = isMaybeColumnSelection(selection) ? 0 : minY;\n\n    const rows = text.split(/\\r?\\n/);\n    let right = left;\n    let bottom = top + rows.length - 1;\n\n    const changes = [];\n    for (let y = 0; y < rows.length; y++) {\n        const cols = rows[y].split('\\t');\n        right = Math.max(right, left + cols.length - 1);\n\n        for (let x = 0; x < cols.length; x++) {\n            changes.push({ x: left + x, y: top + y, value: cols[x] });\n        }\n    }\n\n    return {\n        selection: [[left, top], [right, bottom]],\n        changes,\n    };\n};\n","import { XY, CellLayout, VisibleLayout, LayoutCache } from './types';\nimport { seq } from './util';\nimport { ORIGIN } from './constants';\n\nconst INITIAL_SIZE = 256;\n\n// Local cell layout (virtualized with frozen columns/rows)\n//\n// - converts cell indices to (x, y) canvas pixels for any cell, including off-screen\n// - maps (x, y) canvas pixels back to cell index for any visible cell\n// - can also generate absolute, unscrolled offsets relative to (0,0) to drive scrolling\n// - generates list of visible cols/rows in view\n//\n// Note that adjacent column indices are not necessarily adjacent, i.e. end of [i] != start of [i + 1].\nexport const makeCellLayout = (\n    freeze: XY,\n    indent: XY,\n    offset: XY,\n\n    columns: LayoutCache,\n    rows: LayoutCache,\n): CellLayout => {\n    const [freezeX, freezeY] = freeze;\n    const [indentX, indentY] = indent;\n    const [offsetX, offsetY] = offset;\n\n    const getIndentX = () => indentX;\n    const getIndentY = () => indentY;\n\n    // Origin for cell, frozen or relative\n    const getBaseOriginFor = (index: number, freeze: number, offset: number) => {\n        return index < freeze ? 0 : offset + freeze;\n    };\n    \n    // Get visible pixel x of cell\n    const columnToPixel = (column: number, anchor: number = 0): number => {\n        const base = getBaseOriginFor(column, freezeX, offsetX);\n        const relative = columns.getStart(column) - columns.getStart(base);\n        const adjust = column < freezeX ? 0 : columns.getStart(freezeX) - columns.getStart(0);\n        const size = column < 0 ? indentX : columns.getSize(column);\n\n        return column < 0 ? 0 : indentX + relative + adjust + anchor * size;\n    };\n\n    // Get visible pixel y of cell\n    const rowToPixel = (row: number, anchor: number = 0): number => {\n        const base = getBaseOriginFor(row, freezeY, offsetY);\n        const relative = rows.getStart(row) - rows.getStart(base);\n        const adjust = row < freezeY ? 0 : rows.getStart(freezeY) - rows.getStart(0);\n        const size = row < 0 ? indentY : rows.getSize(row);\n\n        return row < 0 ? 0 : indentY + relative + adjust + anchor * size;\n    };\n\n    // Get visible pixel position of cell, offset with anchor [0..1, 0..1]\n    const cellToPixel = (cell: XY, anchor: XY = ORIGIN): XY => {\n        const [cellX, cellY] = cell;\n        const [anchorX, anchorY] = anchor;\n        return [\n            columnToPixel(cellX, anchorX),\n            rowToPixel(cellY, anchorY),\n        ];\n    };\n\n    // Get absolute / unscrolled pixel x of cell\n    const columnToAbsolute = (column: number, anchorX: number = 0): number => {\n        const relative = columns.getStart(column);\n        const size = column < 0 ? 0 : columns.getSize(column);\n\n        return relative + anchorX * size;\n    };\n\n    // Get absolute / unscrolled pixel y of cell\n    const rowToAbsolute = (row: number, anchorY: number = 0): number => {\n        const relative = rows.getStart(row);\n        const size = row < 0 ? 0 : rows.getSize(row);\n\n        return relative + anchorY * size;\n    };\n\n    // Get absolute / unscrolled pixel position of cell, offset with anchor [0..1, 0..1]\n    const cellToAbsolute = (cell: XY, anchor: XY = ORIGIN): XY => {\n        const [cellX, cellY] = cell;\n        const [anchorX, anchorY] = anchor;\n        return [\n            columnToAbsolute(cellX, anchorX),\n            rowToAbsolute(cellY, anchorY),\n        ];\n    };\n\n    // Lookup pixel X or Y in cell layout\n    const pixelToIndex = (pixel: number, anchor: number, indent: number, freeze: number, offset: number, layout: LayoutCache) => {\n        const relative = pixel - indent;\n        if (relative < 0) return -1;\n\n        const {getStart, lookupIndex} = layout;\n        const frozen = getStart(freeze);\n        if (relative < frozen) {\n            return lookupIndex(relative, anchor);\n        }\n        else {\n            const base = getStart(offset + freeze);\n            const adjust = getStart(freeze) - getStart(0);\n            return lookupIndex(base + relative - adjust, anchor);\n        }\n    };\n\n    // Lookup pixel X or Y in cell layout (helpers)\n    const pixelToColumn = (pixelX: number, anchorX: number = 0) => pixelToIndex(pixelX, anchorX, indentX, freezeX, offsetX, columns);\n    const pixelToRow = (pixelY: number, anchorY: number = 0) => pixelToIndex(pixelY, anchorY, indentY, freezeY, offsetY, rows);\n\n    // Lookup pixel XY in cell layout\n    const pixelToCell = (pixel: XY, anchor: XY = ORIGIN): XY => {\n        const [pixelX, pixelY] = pixel;\n        const [anchorX, anchorY] = anchor;\n        return [\n            pixelToColumn(pixelX, anchorX),\n            pixelToRow(pixelY, anchorY),\n        ];\n    };\n\n    // Lookup absolute / unscrolled pixel X or Y in cell layout\n    const absoluteToIndex = (pixel: number, anchor: number, layout: LayoutCache) => {\n        if (pixel < 0) return -1;\n\n        const {lookupIndex} = layout;\n        return lookupIndex(pixel, anchor);\n    };\n\n    // Lookup absolute / unscrolled X or Y in cell layout (helpers)\n    const absoluteToColumn = (pixelX: number, anchorX: number = 0) => absoluteToIndex(pixelX, anchorX, columns);\n    const absoluteToRow = (pixelY: number, anchorY: number = 0) => absoluteToIndex(pixelY, anchorY, rows);\n\n    // Lookup absolute / unscrolled XY in cell layout\n    const absoluteToCell = (pixel: XY, anchor: XY = ORIGIN): XY => {\n        const [pixelX, pixelY] = pixel;\n        const [anchorX, anchorY] = anchor;\n        return [\n            absoluteToColumn(pixelX, anchorX),\n            absoluteToRow(pixelY, anchorY),\n        ];\n    };\n\n    // Get visible range of columns or rows\n    const getVisibleIndices = (view: number, indent: number, freeze: number, offset: number, layout: LayoutCache) => {\n        const indices = [...seq(freeze)];\n\n        const {getStart} = layout;\n        const relative = view - indent + getStart(offset);\n        for (let i = offset + freeze; getStart(i) <= relative; ++i) {\n            indices.push(i);\n        }\n\n        return indices;\n    };\n\n    // Get visible range for an XY viewport\n    const getVisibleCells = (view: XY): VisibleLayout => {\n        const [viewX, viewY] = view;\n        return {\n            columns: getVisibleIndices(viewX, indentX, freezeX, offsetX, columns),\n            rows: getVisibleIndices(viewY, indentY, freezeY, offsetY, rows),\n        };\n    };\n\n    const getVersion = () => columns.getVersion() + rows.getVersion();\n\n    return {\n        columnToPixel,\n        rowToPixel,\n        cellToPixel,\n\n        columnToAbsolute,\n        rowToAbsolute,\n        cellToAbsolute,\n\n        pixelToColumn,\n        pixelToRow,\n        pixelToCell,\n\n        absoluteToColumn,\n        absoluteToRow,\n        absoluteToCell,\n\n        getVisibleCells,\n        getIndentX,\n        getIndentY,\n\n        getVersion,\n    };\n}\n\n// Offset cache in 1 dimension.\n//\n// Allows O(1) queries of distance between any two points, once warmed up.\n// Can do reverse lookup back to index with binary search, once warmed up.\n//\n// - caches sizer(i), each is only called once\n// - offset[0] = 0\n// - adds up offset[i] = sizer(0) + sizer(1) + ... + sizer(i - 1)\n// - cache can be truncated during resizing ops at split\n// - to replace sizer function, cache must be destroyed\nexport const makeLayoutCache = (\n    sizer: (index: number) => number,\n): LayoutCache => {\n    const offsets = makeIntMap(INITIAL_SIZE);\n    const sizes = makeIntMap(INITIAL_SIZE);\n\n    let version = 0;\n    offsets.set(0, 0);\n\n    // Cache size lookup directly\n    const getSize = (i: number): number => {\n        if (i < 0) return 0;\n        if (sizes.has(i)) return sizes.get(i)!;\n\n        const size = sizer(i) || 0;\n        sizes.set(i, size);\n        return size;\n    };\n\n    // Cache offset sum recursively\n    const getOffset = (i: number): number => {\n        if (i < 0) return 0;\n        if (offsets.has(i)) return offsets.get(i)!;\n\n        let j = (offsets.tail() || 0);\n\n        // Use a while loop to avoid stack overflow\n        while (j < i) {\n            const size = getSize(j);\n            const offset = (offsets.get(j) || 0) + size;\n            offsets.set(++j, offset);\n        }\n\n        return offsets.get(i)!;\n    };\n\n    // Boundary points\n    const getStart = (i: number) => getOffset(i);\n    const getEnd = (i: number) => getOffset(i + 1);\n\n    // Reverse lookup from offset to index\n    const lookupIndex = (x: number, anchor: number = 0) => {\n        // Get end of offsets array\n        let last = offsets.tail() || 0;\n\n        // Extend cache if value exceeds current end\n        while (getOffset(last) < x && getSize(last)) last += 64;\n\n        // Do binary search for exact position\n        let start = 0;\n        let end = last;\n        while (start < end) {\n            let mid = start + Math.floor((end - start) / 2) + 1;\n            let value = getOffset(mid) - (anchor ? anchor * getSize(mid - 1) : 0);\n            if (value <= x) start = mid;\n            else end = mid - 1;\n        }\n\n        return start;\n    };\n\n    const clearAfter = (index: number) => {\n        index = Math.max(0, index);\n        offsets.truncate(index);\n        sizes.truncate(index);\n        version++;\n    };\n\n    const setSizer = (s: (index: number) => number) => {\n        sizer = s;\n    };\n    const getVersion = () => version;\n\n    return {getSize, getStart, getEnd, getVersion, lookupIndex, setSizer, clearAfter};\n};\n\n// Fast map<integer, integer> that is mostly filled in from start to end.\n// Elements are only removed by truncating all indices > n.\nconst makeIntMap = (initialSize: number = 128) => {\n    let used: Uint8Array;\n    let values: Uint32Array;\n    let last = 0;\n\n    const GROW = 1.2; // 20% growth at a time\n\n    const allocate = (size: number) => {\n        let newUsed = new Uint8Array(size);\n        let newValues = new Uint32Array(size);\n        if (used) copy(used, newUsed);\n        if (values) copy(values, newValues);\n        used = newUsed;\n        values = newValues;\n    };\n    allocate(initialSize);\n\n    const copy = (from: Uint8Array | Uint32Array, to: Uint8Array | Uint32Array) => {\n        let n = Math.min(from.length, to.length);\n        for (let i = 0; i < n; ++i) {\n            to[i] = from[i];\n        }\n    };\n\n    const ensure = (size: number) => {\n        const l = values.length;\n        const grow = Math.round(l * GROW);\n        if (l < size) allocate(Math.max(grow, size));\n    };\n\n    const truncate = (size: number) => {\n        const l = values.length;\n\n        // Do nothing if smaller\n        if (l < size) return;\n\n        // If more than 20% bigger, shrink to exact size\n        const shrink = Math.round(size * GROW);\n        if (l > shrink) allocate(size);\n        // Else zero out tail\n        else for (let i = size; i < l; ++i) used[i] = 0;\n\n        // Track last filled element\n        last = Math.min(last, size);\n        while (last > 0 && !used[last]) last--;\n    };\n\n    const getTail = () => used[last] ? last : null;\n\n    const setValue = (i: number, value: number) => {\n        ensure(i + 1);\n        values[i] = value;\n        used[i] = 1;\n        last = Math.max(last, i);\n    };\n\n    const getValue = (i: number) => used[i] ? values[i] : null;\n    const hasValue = (i: number) => !!used[i];\n\n    return {truncate, set: setValue, get: getValue, has: hasValue, tail: getTail};\n};\n","import { InternalSheetStyle, SheetStyle, Style } from './types';\nimport { SIZES } from './constants';\n\nexport const resolveSheetStyle = (sheetStyle?: SheetStyle): InternalSheetStyle => {\n    return {\n        freezeColumns: sheetStyle?.freezeColumns || 0,\n        freezeRows: sheetStyle?.freezeRows || 0,\n        hideColumnHeaders: sheetStyle?.hideColumnHeaders || false,\n        hideRowHeaders: sheetStyle?.hideRowHeaders || false,\n        hideGridlines: sheetStyle?.hideGridlines || false,\n        hideScrollBars: sheetStyle?.hideScrollBars || false,\n        columnHeaderHeight: sheetStyle?.hideColumnHeaders ? 1 : SIZES.headerHeight,\n        rowHeaderWidth: sheetStyle?.hideRowHeaders ? 1 : SIZES.headerWidth,\n    };\n};\n\nexport const resolveCellStyle = (optionalStyle: Style, defaultStyle: Required<Style>): Required<Style> => {\n    return {\n        ...defaultStyle,\n        ...optionalStyle,\n    };\n};\n\nexport const applyAlignment = (\n    start: number,\n    cellSize: number,\n    style: Required<Style>,\n    imageWidth: number,\n    alignment: 'left' | 'center' | 'right' = style.textAlign,\n): number => {\n    if (alignment === 'left') {\n        return start + style.marginLeft;\n    } else if (alignment === 'center') {\n        return start + cellSize * 0.5 - imageWidth / 2;\n    } else if (alignment === 'right') {\n        return start + (cellSize - style.marginRight - imageWidth);\n    }\n    return start;\n};\n","import { CellLayout, CellPropertyFunction, RowOrColumnPropertyFunction, InternalSheetStyle, Rectangle, Selection, Clickable, Style, CellContentType, VisibleLayout, XY } from './types';\nimport { applyAlignment, resolveCellStyle } from './style';\nimport { normalizeSelection, isEmptySelection, isRowSelection, isColumnSelection } from './coordinate';\nimport { isInRange, isInRangeLeft, isInRangeCenter } from './util';\nimport { COLORS, SIZES, DEFAULT_CELL_STYLE, DEFAULT_COLUMN_HEADER_STYLE, HEADER_SELECTED_STYLE, HEADER_ACTIVE_STYLE, NO_STYLE, ONE_ONE } from './constants';\n\nexport const renderSheet = (\n    context: CanvasRenderingContext2D,\n    cellLayout: CellLayout,\n    visibleCells: VisibleLayout,\n\n    sheetStyle: InternalSheetStyle,\n    cellStyle: CellPropertyFunction<Style>,\n\n    selection: Rectangle,\n    secondarySelections: Selection[],\n\n    knobPosition: XY | null,\n    knobArea: Rectangle | null,\n    dragOffset: XY | null,\n    dropTarget: Rectangle | null,\n\n    columnHeaders: RowOrColumnPropertyFunction<CellContentType>,\n    columnHeaderStyle: RowOrColumnPropertyFunction<Style>,\n    displayData: CellPropertyFunction<CellContentType>,\n\n    dataOffset: XY,\n): Clickable[] => {\n    const {canvas} = context;\n    const {width, height} = canvas;\n    const {\n        hideGridlines,\n        hideRowHeaders,\n        hideColumnHeaders,\n        rowHeaderWidth,\n        columnHeaderHeight,\n        freezeColumns,\n        freezeRows,\n    } = sheetStyle;\n    const {columns, rows} = visibleCells;\n    const {\n        columnToPixel,\n        rowToPixel,\n    } = cellLayout;\n\n    const clickables: Clickable[] = [];\n\n    const freeze: XY = [freezeColumns, freezeRows];\n    const indent: XY = [rowHeaderWidth, columnHeaderHeight];\n\n    resizeCanvas(canvas);\n    context.clearRect(0, 0, width, height);\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, width, height);\n\n    // Cell fill\n    for (const y of rows) {\n        for (const x of columns) {\n            const left = columnToPixel(x);\n            const right = columnToPixel(x, 1);\n            const top = rowToPixel(y);\n            const bottom = rowToPixel(y, 1);\n\n            const {fillColor} = cellStyle(x, y);\n            if (fillColor) {\n                context.fillStyle = fillColor;\n                context.fillRect(left, top, right - left, bottom - top);\n            }\n        }\n    }\n\n    const selectionActive = !isEmptySelection(selection);\n    const rowSelectionActive = isRowSelection(selection);\n    const columnSelectionActive = isColumnSelection(selection);\n\n    // Get selection range\n    const [selected, hideKnob] = resolveFrozenSelection(\n        selection,\n        cellLayout,\n        freeze,\n        indent,\n        dataOffset,\n    );\n\n    // Selection fill\n    if (selectionActive) {\n        const [[left, top], [right, bottom]] = selected;\n        context.fillStyle = COLORS.selectionBackground;\n        context.fillRect(left, top, right - left, bottom - top);\n    }\n\n    if (!hideRowHeaders) {\n        // Row header background\n        context.fillStyle = COLORS.headerBackground;\n        context.fillRect(0, 0, rowHeaderWidth, context.canvas.height);\n\n        // Row header selection shadow\n        if (selectionActive && !columnSelectionActive) {\n            const [[, top], [, bottom]] = selected;\n            context.fillStyle = COLORS.headerActive;\n            context.fillRect(0, top, rowHeaderWidth, bottom - top);\n        }\n    }\n\n    if (!hideColumnHeaders) {\n        // Column header background\n        context.fillStyle = COLORS.headerBackground;\n        context.fillRect(0, 0, context.canvas.width, columnHeaderHeight);\n\n        // Column header selection shadow\n        if (selectionActive && !rowSelectionActive) {\n            const [[left], [right]] = selected;\n            context.fillStyle = COLORS.headerActive;\n            context.fillRect(left, 0, right - left, columnHeaderHeight);\n        }\n    }\n\n    // Grid\n    context.strokeStyle = COLORS.gridLine;\n    context.lineWidth = 1;\n\n    const gridRight = hideGridlines ? rowHeaderWidth : context.canvas.width;\n    const gridBottom = hideGridlines ? columnHeaderHeight : context.canvas.height;\n\n    const drawGridLineX = (x: number, height: number) => {\n        context.beginPath();\n        context.moveTo(x - .5, 0);\n        context.lineTo(x - .5, height);\n        context.stroke();\n    };\n\n    const drawGridLineY = (y: number, width: number) => {\n        context.beginPath();\n        context.moveTo(0, y - .5);\n        context.lineTo(width, y - .5);\n        context.stroke();\n    };\n\n    drawGridLineX(rowHeaderWidth, context.canvas.height);\n    drawGridLineY(columnHeaderHeight, context.canvas.width);\n\n    for (const column of columns) {\n        const right = columnToPixel(column, 1);\n        drawGridLineX(right, gridBottom);\n    }\n\n    for (const row of rows) {\n        const bottom = rowToPixel(row, 1);\n        drawGridLineY(bottom, gridRight);\n    }\n\n    const [[minX, minY], [maxX, maxY]] = normalizeSelection(selection);\n\n    // Row header text\n    if (!hideRowHeaders) {\n        context.textBaseline = 'middle';\n        context.textAlign = 'center';\n        context.font = DEFAULT_CELL_STYLE.fontSize + 'px ' + DEFAULT_CELL_STYLE.fontFamily;\n        context.fillStyle = COLORS.headerText;\n\n        for (const row of rows) {\n            const content = `${row + 1}`;\n\n            // Row selection mode\n            // (this is separate from the header selection shadow because we only want to highlight visible headers)\n            const isActive = isInRange(row, minY, maxY);\n            const isSelected = (rowSelectionActive && !columnSelectionActive) && isActive;\n            const style = isSelected ? HEADER_SELECTED_STYLE : isActive ? HEADER_ACTIVE_STYLE : NO_STYLE;\n\n            const top = rowToPixel(row);\n            const bottom = rowToPixel(row, 1);\n\n            clickables.push(...renderCell(\n                context,\n                content,\n                style,\n                DEFAULT_COLUMN_HEADER_STYLE,\n                0,\n                top,\n                rowHeaderWidth,\n                bottom - top,\n            ));\n        }\n    }\n\n    // Column header text\n    if (!hideColumnHeaders) {\n        context.textBaseline = 'middle';\n        context.textAlign = 'center';\n\n        for (const column of columns) {\n            const content = columnHeaders(column) ?? excelHeaderString(column + 1);\n\n            // Column selection mode\n            // (this is separate from the header selection shadow because we only want to highlight visible headers)\n            const isActive = isInRange(column, minX, maxX);\n            const selectedStyle = (columnSelectionActive && !rowSelectionActive) && isActive\n                ? HEADER_SELECTED_STYLE : NO_STYLE;\n            const activeStyle = isActive ? HEADER_ACTIVE_STYLE : NO_STYLE;\n            const style = {\n                ...columnHeaderStyle(column),\n                ...activeStyle,\n                ...selectedStyle,\n            };\n\n            const left = columnToPixel(column);\n            const right = columnToPixel(column, 1);\n\n            clickables.push(...renderCell(\n                context,\n                content,\n                style,\n                DEFAULT_COLUMN_HEADER_STYLE,\n                left,\n                0,\n                right - left,\n                columnHeaderHeight\n            ));\n        }\n    }\n\n    // Selection outline\n    if (selectionActive) {\n        context.strokeStyle = COLORS.selectionBorder;\n        context.lineWidth = 2;\n\n        const [[left, top], [right, bottom]] = selected;\n        context.strokeRect(\n            left,\n            top,\n            right - left - 1,\n            bottom - top - 1,\n        );\n    }\n\n    for (const secondarySelection of secondarySelections) {\n        const selection = secondarySelection.span;\n        if (isEmptySelection(selection)) continue;\n\n        const [selected] = resolveFrozenSelection(\n            selection,\n            cellLayout,\n            freeze,\n            indent,\n            dataOffset,\n        );\n        const [[left, top], [right, bottom]] = selected;\n\n        context.strokeStyle = secondarySelection.color;\n        context.lineWidth = 1;\n        context.beginPath();\n        context.strokeRect(left - 1, top - 1, right - left + 1, bottom - top + 1);\n    }\n\n    // Knob drag outline\n    if (knobArea) {\n        let [[minX, minY], [maxX, maxY]] = normalizeSelection(knobArea);\n        const left = columnToPixel(minX);\n        const top = rowToPixel(minY);\n        const right = columnToPixel(maxX, 1);\n        const bottom = rowToPixel(maxY, 1);\n\n        context.strokeStyle = COLORS.knobAreaBorder;\n        context.setLineDash([3, 3]);\n        context.lineWidth = 1;\n\n        context.strokeRect(left - 1, top - 1, right - left + 1, bottom - top + 1);\n        context.setLineDash([]);\n    }\n\n    // Selection knob\n    if (knobPosition && !hideKnob) {\n        const [knobX, knobY] = knobPosition;\n        context.fillStyle = COLORS.selectionBorder;\n        context.fillRect(knobX - SIZES.knobArea * 0.5, knobY - SIZES.knobArea * 0.5, SIZES.knobArea, SIZES.knobArea);\n    }\n\n    // Drag ghost (pixels)\n    if (dragOffset) {\n        const [shiftX, shiftY] = dragOffset;\n        const [[left, top], [right, bottom]] = resolveSelection(selection, cellLayout);\n\n        context.fillStyle = COLORS.dragGhost;\n        context.fillRect(left + shiftX, top + shiftY, right - left, bottom - top);\n    }\n\n    // Drop target\n    if (dropTarget) {\n        let [[left, top], [right, bottom]] = resolveSelection(dropTarget, cellLayout);\n\n        context.strokeStyle = COLORS.dropTarget;\n        context.lineWidth = 2;\n\n        if (isColumnSelection(dropTarget)) {\n            right = left;\n        }\n        if (isRowSelection(dropTarget)) {\n            bottom = top;\n        }\n        context.strokeRect(left - 1, top - 1, right - left, bottom - top);\n    }\n\n    // Cell contents\n    context.textBaseline = 'middle';\n\n    for (const y of rows) {\n        for (const x of columns) {\n            const left = columnToPixel(x);\n            const right = columnToPixel(x, 1);\n            const top = rowToPixel(y);\n            const bottom = rowToPixel(y, 1);\n\n            const cellContent = displayData(x, y);\n            if (cellContent !== null && cellContent !== undefined) {\n                const style = cellStyle(x, y);\n                clickables.push(...renderCell(context, cellContent, style, DEFAULT_CELL_STYLE, left, top, right - left, bottom - top));\n            }\n        }\n    }\n\n    return clickables;\n};\n\nexport const renderCell = (\n    context: CanvasRenderingContext2D,\n    cellContent: CellContentType,\n    style: Style,\n    defaultCellStyle: Required<Style>,\n    xCoord: number,\n    yCoord: number,\n    cellWidth: number,\n    cellHeight: number\n): Clickable[] => {\n    const clickables: Clickable[] = [];\n\n    if (cellContent === null) {\n        return clickables;\n    }\n\n    const finalStyle = resolveCellStyle(style, defaultCellStyle);\n    context.fillStyle = finalStyle.color;\n    context.font = finalStyle.weight + ' ' + finalStyle.fontSize + 'px ' + finalStyle.fontFamily;\n    context.textAlign = finalStyle.textAlign;\n\n    const yy = Math.floor(yCoord + cellHeight * 0.5);\n\n    context.save();\n    context.beginPath();\n    context.rect(xCoord, yCoord, cellWidth, cellHeight);\n    context.clip();\n\n    if (finalStyle.backgroundColor !== '') {\n        context.fillStyle = finalStyle.backgroundColor;\n        context.fillRect(xCoord, yCoord, cellWidth, cellHeight);\n        context.fillStyle = finalStyle.color;\n    }\n\n    if (typeof cellContent === 'string' || typeof cellContent === 'number') {\n        const xx = applyAlignment(xCoord, cellWidth, finalStyle, 0);\n        const text = '' + cellContent;\n        context.fillText(text, xx, yy);\n    } else if (typeof cellContent === 'object') {\n        for (const obj of cellContent.items) {\n            let x = 0;\n            let y = 0;\n            let w = 0;\n            let h = 0;\n\n            if (obj.content instanceof HTMLImageElement) {\n                w = obj.width || cellWidth;\n                h = obj.height || cellHeight;\n\n                const finalX = applyAlignment(xCoord, cellWidth, finalStyle, w, obj.horizontalAlign);\n                x = finalX + obj.x;\n                y = yy + obj.y;\n\n                context.drawImage(obj.content, x, y, w, h);\n            } else if (typeof obj.content === 'string' || typeof obj.content === 'number') {\n                if (obj.horizontalAlign) {\n                    context.textAlign = obj.horizontalAlign;\n                }\n                const finalX = applyAlignment(xCoord, cellWidth, finalStyle, 0, obj.horizontalAlign);\n                const text = '' + obj.content;\n\n                const left = finalX + obj.x;\n                const top = yy + obj.y;\n                context.fillText(text, left, top);\n\n                const measure = context.measureText(text);\n                x = left - measure.actualBoundingBoxLeft;\n                y = top - measure.actualBoundingBoxAscent;\n                w = left + measure.actualBoundingBoxRight - x;\n                h = top + measure.actualBoundingBoxDescent - y;\n            }\n            if (obj.onClick) {\n                clickables.push({\n                    rect: [[x, y], [x + w, y + h]],\n                    obj,\n                });\n            }\n        }\n    }\n    context.restore();\n\n    return clickables;\n};\n\n// Resolve selection into a consistent rectangle, without dealing with frozen rows/columns\nconst resolveSelection = (\n    selection: Rectangle,\n    cellLayout: CellLayout,\n) => {\n    const {cellToPixel} = cellLayout;\n\n    const rowSelectionActive = isRowSelection(selection);\n    const columnSelectionActive = isColumnSelection(selection);\n\n    // Get selection range\n    const [min, max] = normalizeSelection(selection);\n\n    // Direct projection to visible grid\n    let [left, top] = cellToPixel(min);\n    let [right, bottom] = cellToPixel(max, ONE_ONE);\n\n    // Extend full row/column selection infinitely right/down\n    if (rowSelectionActive) {\n        right = 1e5;\n    }\n    if (columnSelectionActive) {\n        bottom = 1e5;\n    }\n\n    return [[left, top], [right, bottom]];\n};\n\n// Resolve selection into a consistent rectangle, handling edge cases around frozen rows/columns.\nconst resolveFrozenSelection = (\n    selection: Rectangle,\n    cellLayout: CellLayout,\n\n    freeze: XY,\n    indent: XY,\n    offset: XY,\n) => {\n    const {cellToPixel, columnToAbsolute, rowToAbsolute} = cellLayout;\n\n    const rowSelectionActive = isRowSelection(selection);\n    const columnSelectionActive = isColumnSelection(selection);\n\n    const [freezeX, freezeY] = freeze;\n    const [indentX, indentY] = indent;\n    const [offsetX, offsetY] = offset;\n\n    // Get selection range\n    const [min, max] = normalizeSelection(selection);\n    const [minX, minY] = min;\n    const [maxX, maxY] = max;\n\n    // Direct projection to visible grid\n    let [left, top] = cellToPixel(min);\n    let [right, bottom] = cellToPixel(max, ONE_ONE);\n\n    // Get frozen edge\n    const frozenX = columnToAbsolute(freezeX);\n    const frozenY = rowToAbsolute(freezeY);\n\n    let hideKnob = false;\n\n    // If the selection crosses the frozen edge, it needs to always cover the entire frozen area.\n    if (isInRangeCenter(freezeX, minX, maxX + 1)) {\n        const edge = indentX + frozenX;\n        if (right <= edge) {\n            right = edge;\n            hideKnob = true;\n        }\n    }\n    if (isInRangeCenter(freezeY, minY, maxY + 1)) {\n        const edge = indentY + frozenY;\n        if (bottom <= edge) {\n            bottom = edge;\n            hideKnob = true;\n        }\n    }\n\n    // If the selection starts/ends under the frozen area, treat as off-screen\n    if (isInRangeLeft(minX, freezeX, offsetX + freezeX)) {\n        left = -1e5;\n\n        const lastInvisibleX = offsetX + freezeX - 1;\n        if (maxX <= lastInvisibleX) {\n            if (maxX === lastInvisibleX) right = indentX;\n            else right = -1e5;\n            hideKnob = true;\n        }\n    }\n    if (isInRangeLeft(minY, freezeY, offsetY + freezeY)) {\n        top = -1e5;\n\n        const lastInvisibleY = offsetY + freezeY - 1;\n        if (maxY <= lastInvisibleY) {\n            if (maxY === lastInvisibleY) bottom = indentY;\n            else bottom = -1e5;\n            hideKnob = true;\n        }\n    }\n\n    if (rowSelectionActive && offsetX > 0) {\n        hideKnob = true;\n    }\n    if (columnSelectionActive && offsetY > 0) {\n        hideKnob = true;\n    }\n\n    // Extend full row/column selection infinitely right/down\n    if (rowSelectionActive) {\n        right = 1e5;\n    }\n    if (columnSelectionActive) {\n        bottom = 1e5;\n    }\n\n    return [\n        [[left, top], [right, bottom]],\n        hideKnob,\n    ] as [Rectangle, boolean];\n};\n\nconst resizeCanvas = (canvas: HTMLCanvasElement) => {\n    const { width, height } = canvas.getBoundingClientRect();\n    let { devicePixelRatio: ratio = 1 } = window;\n    if (ratio < 1) {\n        ratio = 1;\n    }\n    const newCanvasWidth = Math.round(width * ratio);\n    const newCanvasHeight = Math.round(height * ratio);\n\n    if (canvas.width !== newCanvasWidth || canvas.height !== newCanvasHeight) {\n        const context = canvas.getContext('2d');\n        if (context) {\n            canvas.width = newCanvasWidth;\n            canvas.height = newCanvasHeight;\n            context.scale(ratio, ratio);\n        }\n        return true;\n    }\n\n    return false;\n};\n\nconst excelHeaderString = (num: number) => {\n    let s = '';\n    let t = 0;\n    while (num > 0) {\n        t = (num - 1) % 26;\n        s = String.fromCharCode(65 + t) + s;\n        num = ((num - t) / 26) | 0;\n    }\n    return s || '';\n};\n","import styles from './styles.module.css';\nimport React, {\n    forwardRef,\n    useRef,\n    useImperativeHandle,\n    useLayoutEffect,\n    useState,\n    useMemo,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    ReactElement,\n} from 'react';\nimport useResizeObserver from 'use-resize-observer';\n\nimport {\n    XY,\n    Rectangle,\n    CellLayout,\n    CellProperty,\n    CellContentType,\n    RowOrColumnProperty,\n    Selection,\n    Clickable,\n    Change,\n    SheetPointerEvent,\n    InternalSheetStyle,\n    InputStyle,\n    SheetStyle,\n    Style,\n    VisibleLayout,\n} from './types';\n\nimport {\n    ARROW_KEYS,\n\tMAX_SEARCHABLE_INDEX,\n\tDEFAULT_CELL_STYLE,\n\tINITIAL_MAX_SCROLL,\n\tNO_CELL,\n    NO_CLICKABLES,\n\tNO_SELECTION,\n    NO_SELECTIONS,\n\tORIGIN,\n    ONE_ONE,\n} from './constants';\nimport {\n    normalizeSelection,\n    isSameSelection,\n    isRowSelection,\n    isColumnSelection,\n    isEmptySelection,\n    getDirectionStep,\n    maxXY,\n    addXY,\n} from './coordinate';\nimport { useMouse } from './mouse';\nimport { useScroll, scrollToCell } from './scroll';\nimport { useClipboardCopy, useClipboardPaste } from './clipboard';\nimport { makeLayoutCache, makeCellLayout } from './layout';\nimport { createCellProp, createRowOrColumnProp, findInDisplayData } from './props';\nimport { renderSheet } from './render';\nimport { resolveSheetStyle } from './style';\n\nexport type SheetInputProps = {\n    value: string,\n    autoFocus: boolean,\n    onKeyDown: KeyboardEventHandler<HTMLElement>,\n    onChange: (value: string) => void,\n    style: InputStyle,\n};\n\nexport type SheetRenderProps = {\n    visibleCells: VisibleLayout,\n    cellLayout: CellLayout,\n    selection: Rectangle,\n    editMode: boolean,\n};\n\nexport type SheetProps = {\n    cellWidth?: RowOrColumnProperty<number>;\n    cellHeight?: RowOrColumnProperty<number>;\n    columnHeaders?: RowOrColumnProperty<CellContentType>;\n    columnHeaderStyle?: RowOrColumnProperty<Style>;\n    cellStyle?: CellProperty<Style>;\n    readOnly?: CellProperty<boolean>;\n    canSizeColumn?: RowOrColumnProperty<boolean>;\n    canSizeRow?: RowOrColumnProperty<boolean>;\n    canOrderColumn?: RowOrColumnProperty<boolean>;\n    canOrderRow?: RowOrColumnProperty<boolean>;\n    sourceData?: CellProperty<string | number | null>;\n    displayData?: CellProperty<CellContentType>;\n    editData?: CellProperty<string>;\n    editKeys?: CellProperty<string>;\n    sheetStyle?: SheetStyle;\n    selection?: Rectangle,\n    secondarySelections?: Selection[];\n\n    cacheLayout?: boolean,\n    dontCommitEditOnSelectionChange?: boolean;\n\n    inputComponent?: (\n        x: number,\n        y: number,\n        props: SheetInputProps,\n        commitEditingCell?: (value?: string | number | null) => void\n    ) => ReactElement | undefined;\n\n    renderInside?: (props: SheetRenderProps) => React.ReactNode,\n    renderOutside?: (props: SheetRenderProps) => React.ReactNode,\n\n    onSelectionChanged?: (minX: number, minY: number, maxX: number, maxY: number) => void;\n    onRightClick?: (e: SheetPointerEvent) => void;\n    onChange?: (changes: Array<Change>) => void;\n    onColumnOrderChange?: (indices: number[], order: number) => void;\n    onRowOrderChange?: (indices: number[], order: number) => void;\n    onCellWidthChange?: (indices: number[], value: number) => void;\n    onCellHeightChange?: (indices: number[], value: number) => void;\n    onScrollChange?: (visibleRows: number[], visibleColumns: number[]) => void;\n};\n\nexport type SheetRef = CellLayout & {\n    startEditingCell: (editCell: XY, arrowKeyCommitMode?: boolean) => void,\n};\n\nconst Sheet = forwardRef<SheetRef, SheetProps>((props, ref) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const overlayRef = useRef<HTMLDivElement>(null);\n\n    const [maxScroll, setMaxScroll] = useState<XY>(INITIAL_MAX_SCROLL);\n    const [dataOffset, setDataOffset] = useState<XY>(ORIGIN);\n    // TODO: smooth scrolling\n    // const [pixelOffset, setPixelOffset] = useState<XY>(ORIGIN);\n\n    const selectionProp = props.selection ?? NO_SELECTION;\n\n    const [selection, setSelection] = useState<Rectangle>(selectionProp);\n    const [knobArea, setKnobArea] = useState<Rectangle | null>(null);\n    const [dragOffset, setDragOffset] = useState<XY | null>(null);\n    const [dropTarget, setDropTarget] = useState<Rectangle | null>(null);\n    const [editCell, setEditCell] = useState<XY>(NO_CELL);\n\n    const [lastSelectionProp, setLastSelectionProp] = useState<Rectangle>(selectionProp);\n    if (lastSelectionProp !== selectionProp) {\n        setLastSelectionProp(selectionProp);\n        setSelection(selectionProp);\n    }\n\n    const [editValue, setEditValue] = useState<string | number>('');\n    const [arrowKeyCommitMode, setArrowKeyCommitMode] = useState(false);\n\n    const { width: canvasWidth = 3000, height: canvasHeight = 3000 } = useResizeObserver({ ref: canvasRef });\n\n    const cellWidth = useMemo(() => createRowOrColumnProp(props.cellWidth, 100), [props.cellWidth]);\n    const cellHeight = useMemo(() => createRowOrColumnProp(props.cellHeight, 22), [props.cellHeight]);\n    const columnHeaders = useMemo(() => createRowOrColumnProp(props.columnHeaders, null), [\n        props.columnHeaders,\n    ]);\n    const columnHeaderStyle = useMemo(() => createRowOrColumnProp(props.columnHeaderStyle, {}), [\n        props.columnHeaderStyle,\n    ]);\n\n    const canSizeColumn = useMemo(() => createRowOrColumnProp(props.canSizeColumn, true), [props.canSizeColumn]);\n    const canSizeRow = useMemo(() => createRowOrColumnProp(props.canSizeRow, true), [props.canSizeRow]);\n    const canOrderColumn = useMemo(() => createRowOrColumnProp(props.canOrderColumn, true), [props.canOrderColumn]);\n    const canOrderRow = useMemo(() => createRowOrColumnProp(props.canOrderRow, true), [props.canOrderRow]);\n\n    const cellReadOnly = useMemo(() => createCellProp(props.readOnly, false), [props.readOnly]);\n\n    const sourceData = useMemo(() => createCellProp(props.sourceData, null), [props.sourceData]);\n    const displayData = useMemo(() => createCellProp(props.displayData, ''), [props.displayData]);\n    const editData = useMemo(() => createCellProp(props.editData, ''), [props.editData]);\n    const editKeys = useMemo(() => createCellProp(props.editKeys, ''), [props.editKeys]);\n    const cellStyle = useMemo(() => createCellProp(props.cellStyle, DEFAULT_CELL_STYLE), [props.cellStyle]);\n\n    const sheetStyle: InternalSheetStyle = useMemo(() => resolveSheetStyle(props.sheetStyle), [props.sheetStyle]);\n    const secondarySelections = props.secondarySelections ?? NO_SELECTIONS;\n\n    const [maxScrollX, maxScrollY] = maxScroll;\n\n    const [editCellX, editCellY] = editCell;\n    const editMode = editCellX !== -1 && editCellY !== -1;\n\n    // Global layout for unscrolled/unfrozen grid\n    // Cached either per width/height pair, or permanently with invalidation on resize/reorder.\n    const columnLayout = useMemo(() => makeLayoutCache(cellWidth), [props.cacheLayout ? null : cellWidth]);\n    const rowLayout = useMemo(() => makeLayoutCache(cellHeight), [props.cacheLayout ? null : cellHeight]);\n    useMemo(() => {\n        if (!props.cacheLayout) return;\n        columnLayout.setSizer(cellWidth);\n        rowLayout.setSizer(cellHeight);\n    }, [props.cacheLayout, cellWidth, cellHeight])\n\n    // Virtual layout for indented/scrolled/frozen grid\n    const {freezeColumns, freezeRows, rowHeaderWidth, columnHeaderHeight} = sheetStyle;\n    const cellLayout = useMemo(\n        () => makeCellLayout(\n            [freezeColumns, freezeRows],\n            [rowHeaderWidth, columnHeaderHeight],\n            dataOffset,\n            columnLayout,\n            rowLayout,\n        ),\n        [freezeColumns, freezeRows, rowHeaderWidth, columnHeaderHeight, dataOffset, columnLayout, rowLayout]\n    );\n\n    // Build range of visible cells\n    const {getVisibleCells, cellToPixel, getVersion} = cellLayout;\n    const visibleCells = useMemo(\n        () => getVisibleCells([canvasWidth, canvasHeight]),\n        // Need to invalidate view if cached layout version changed\n        // eslint-disable-next-line\n        [getVisibleCells, canvasWidth, canvasHeight, getVersion()]\n    );\n\n    // Notify of viewport change\n    useLayoutEffect(() => {\n        if (props.onScrollChange) {\n            props.onScrollChange([...visibleCells.rows], [...visibleCells.columns]);\n        }\n    }, [visibleCells, props.onScrollChange]);\n\n    // Set selection with scrolling\n    const changeSelection = (newSelection: Rectangle, scrollTo = true, toHead = false) => {\n        if (!isSameSelection(selection, newSelection)) {\n            setSelection(newSelection);\n        }\n\n        const {current: overlay} = overlayRef;\n        if (!overlay) return;\n\n        if (scrollTo) {\n            const [anchor, head] = newSelection;\n            scrollToCell(\n                overlay,\n                toHead ? head : anchor,\n                [canvasWidth, canvasHeight],\n                [freezeColumns, freezeRows],\n                dataOffset,\n                maxScroll,\n                cellLayout,\n                (dataOffset: XY, maxScroll: XY) => {\n                    setDataOffset(dataOffset);\n                    setMaxScroll(maxScroll);\n                },\n            );\n        }\n\n        if (props.onSelectionChanged) {\n            const [[minX, minY], [maxX, maxY]] = normalizeSelection(newSelection);\n            props.onSelectionChanged(minX, minY, maxX, maxY);\n        }\n    };\n\n    const commitEditingCell = (value?: string) => {\n        if (props.onChange) {\n            const [cellX, cellY] = editCell;\n            props.onChange([{ x: cellX, y: cellY, value: value !== undefined ? value : editValue }]);\n        }\n        setEditCell(NO_CELL);\n    };\n\n    const startEditingCell = (editCell: XY, arrowKeyCommitMode = false) => {\n        const [cellX, cellY] = editCell;\n        if (cellReadOnly(cellX, cellY)) {\n            return;\n        }\n\n        const editDataValue = editData(cellX, cellY);\n        let val = '';\n        if (editDataValue !== null && editDataValue !== undefined) {\n            val = editDataValue;\n        }\n        setEditCell(editCell);\n        setEditValue(val);\n        setArrowKeyCommitMode(arrowKeyCommitMode);\n        setLastEditKey(editKeys(...editCell));\n    };\n\n    // Output from rendered layout is used to drive events on user content\n    const hitmapRef = useRef<Clickable[]>(NO_CLICKABLES);\n\n    // Textarea is used to hold text to copy, and receives pastes\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n    useClipboardCopy(textAreaRef, selection, editMode, editData);\n    useClipboardPaste(textAreaRef, selection, changeSelection, props.onChange);\n\n    const onScroll = useScroll(dataOffset, maxScroll, cellLayout, setDataOffset, setMaxScroll);\n\n    const {mouseHandlers, knobPosition} = useMouse(\n        hitmapRef,\n        selection,\n        knobArea,\n        editMode,\n        editData,\n        sourceData,\n        canSizeColumn,\n        canSizeRow,\n        canOrderColumn,\n        canOrderRow,\n        cellLayout,\n        visibleCells,\n        sheetStyle,\n\n        startEditingCell,\n        commitEditingCell,\n        setKnobArea,\n        setDragOffset,\n        setDropTarget,\n        changeSelection,\n\n        props.cacheLayout ? columnLayout.clearAfter : undefined,\n        props.cacheLayout ? rowLayout.clearAfter : undefined,\n\n        props.onChange,\n        props.onColumnOrderChange,\n        props.onRowOrderChange,\n        props.onCellWidthChange,\n        props.onCellHeightChange,\n        props.onRightClick,\n        props.dontCommitEditOnSelectionChange,\n    );\n\n    useLayoutEffect(() => {\n        const {current: canvas} = canvasRef;\n        if (!canvas) {\n            return;\n        }\n\n        const context = canvas.getContext('2d');\n        if (!context) {\n            return;\n        }\n\n        const animationFrameId = window.requestAnimationFrame(() => {\n            hitmapRef.current = renderSheet(\n                context,\n                cellLayout,\n                visibleCells,\n                sheetStyle,\n                cellStyle,\n                selection,\n                secondarySelections,\n                knobPosition,\n                knobArea,\n                dragOffset,\n                dropTarget,\n                columnHeaders,\n                columnHeaderStyle,\n                displayData,\n\n                dataOffset,\n            );\n        });\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n        };\n    }, [\n        cellLayout,\n        visibleCells,\n        sheetStyle,\n        cellStyle,\n        selection,\n        secondarySelections,\n\n        knobPosition,\n        knobArea,\n        dragOffset,\n        dropTarget,\n\n        columnHeaders,\n        columnHeaderStyle,\n        displayData,\n\n        dataOffset,\n    ]);\n\n    const onKeyDown = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n            setEditCell(NO_CELL);\n            return;\n        }\n\n        const direction = \n            e.key === 'Enter' ? 'down' : \n            e.key === 'Tab' ? 'right' : \n            arrowKeyCommitMode ? ARROW_KEYS[e.key] : \n            null;\n\n        if (direction) {\n            e.preventDefault();\n            const step = getDirectionStep(direction);\n            const head = maxXY(addXY(editCell, step), ORIGIN);\n            commitEditingCell();\n            changeSelection([head, head]);\n        }\n    };\n\n    const onGridKeyDown = (e: KeyboardEvent) => {\n        if (editMode && arrowKeyCommitMode && (e.key in ARROW_KEYS)) {\n            commitEditingCell();\n            return;\n        }\n\n        if ((e.metaKey || e.ctrlKey) && String.fromCharCode(e.which).toLowerCase() === 'v') {\n            return;\n        }\n\n        // copy\n        if ((e.metaKey || e.ctrlKey) && String.fromCharCode(e.which).toLowerCase() === 'c') {\n            const {current: textArea} = textAreaRef;\n            textArea?.select();\n            return;\n        }\n\n        if (e.key === 'Backspace' || e.key === 'Delete') {\n            let [[x1, y1], [x2, y2]] = normalizeSelection(selection);\n            if (isRowSelection(selection)) {\n                x1 = 0;\n                x2 = MAX_SEARCHABLE_INDEX;\n            }\n            if (isColumnSelection(selection)) {\n                y1 = 0;\n                y2 = MAX_SEARCHABLE_INDEX;\n            }\n\n            const changes: Change[] = [];\n            for (let y = y1; y <= y2; y++) {\n                for (let x = x1; x <= x2; x++) {\n                    changes.push({ x: x, y: y, value: null });\n                }\n            }\n            if (props.onChange) {\n                props.onChange(changes);\n            }\n            return;\n        }\n\n        // nothing selected\n        if (isEmptySelection(selection)) {\n            return;\n        }\n\n        if (\n            (e.keyCode >= 48 && e.keyCode <= 57) ||\n            (e.keyCode >= 96 && e.keyCode <= 105) ||\n            (e.keyCode >= 65 && e.keyCode <= 90) ||\n            e.key === 'Enter' ||\n            e.key === '-' ||\n            e.key === '.' ||\n            e.key === ','\n        ) {\n            const [cell] = selection;\n            const [cellX, cellY] = cell;\n            if (cellReadOnly(cellX, cellY)) {\n                e.preventDefault(); // so we dont get keystrokes inside the text area\n                return;\n            }\n\n            startEditingCell(cell, e.key !== 'Enter');\n            return;\n        }\n\n        if (e.key in ARROW_KEYS) {\n            let [anchor, head] = selection;\n\n            const direction = ARROW_KEYS[e.key];\n            const step = getDirectionStep(direction);\n\n            if (e.metaKey || e.ctrlKey) {\n                head = findInDisplayData(displayData, head, direction);\n            }\n            else {\n                head = maxXY(addXY(head, step), ORIGIN);\n            }\n            if (!e.shiftKey) {\n                anchor = head;\n            }\n            changeSelection([anchor, head], true, true);\n            return;\n        }\n\n        e.preventDefault();\n    };\n\n    const [lastEditKey, setLastEditKey] = useState('');\n\n    let editTextPosition = ORIGIN;\n    let editTextWidth = 0;\n    let editTextHeight = 0;\n    let editTextTextAlign: 'right' | 'left' | 'center' = 'right';\n    if (editMode) {\n        const style = cellStyle(...editCell);\n        editTextPosition = cellToPixel(editCell);\n        editTextPosition = addXY(editTextPosition, ONE_ONE);\n        editTextWidth = cellWidth(editCellX) - 3;\n        editTextHeight = cellHeight(editCellY) - 3;\n        editTextTextAlign = style.textAlign || DEFAULT_CELL_STYLE.textAlign || 'left';\n        const editKey = editKeys(...editCell);\n        if (editKey !== lastEditKey) {\n            setLastEditKey('');\n            setEditCell(NO_CELL);\n        }\n    }\n\n    const [textX, textY] = editTextPosition;\n    const inputProps = {\n        value: editValue,\n        autoFocus: true,\n        onKeyDown: onKeyDown,\n        style: {\n            position: 'absolute',\n            left: textX,\n            top: textY,\n            padding: '0px 4px',\n            width: editTextWidth,\n            height: editTextHeight,\n            outline: 'none',\n            border: 'none',\n            textAlign: editTextTextAlign,\n            color: 'black',\n            fontSize: DEFAULT_CELL_STYLE.fontSize,\n            fontFamily: 'sans-serif',\n        } as InputStyle,\n    };\n\n    const input = props.inputComponent?.(\n        editCellX,\n        editCellY,\n        { ...inputProps, onChange: setEditValue } as SheetInputProps,\n        commitEditingCell\n    );\n\n    let overlayDivClassName = styles.sheetscroll;\n    const overlayDivStyles: React.CSSProperties = {\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        overflow: 'scroll',\n        borderBottom: '1px solid #ddd',\n    };\n    const canvasStyles: React.CSSProperties = {\n        width: 'calc(100% - 14px)',\n        height: 'calc(100% - 15px)',\n        outline: '1px solid #ddd', // find another better solution ?\n    };\n\n    if (sheetStyle.hideScrollBars) {\n        delete canvasStyles['outline'];\n        delete overlayDivStyles['borderBottom'];\n        overlayDivClassName = '';\n        canvasStyles.width = 'calc(100%)';\n    }\n\n    const renderedInside = useMemo(\n        () => props.renderInside?.({visibleCells, cellLayout, selection, editMode}),\n        [props.renderInside, visibleCells, cellLayout, selection, editMode]\n    );\n\n    const renderedOutside = useMemo(\n        () => props.renderOutside?.({visibleCells, cellLayout, selection, editMode}),\n        [props.renderOutside, visibleCells, cellLayout, selection, editMode]\n    );\n\n    // External component API\n    useImperativeHandle(ref, () => ({\n        ...cellLayout,\n        startEditingCell,\n    }), [cellLayout, startEditingCell]);\n\n    return (\n        <div style={{ position: 'relative', height: '100%', overflow: 'hidden' }}>\n            <canvas style={canvasStyles} ref={canvasRef} />\n            <div\n                ref={overlayRef}\n                {...mouseHandlers}\n                onScroll={onScroll}\n                className={overlayDivClassName}\n                style={overlayDivStyles}\n            >\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: 1,\n                        height: maxScrollY + 2000,\n                        backgroundColor: 'rgba(0,0,0,0.0)',\n                    }}\n                ></div>\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: maxScrollX + 5000,\n                        height: 1,\n                        backgroundColor: 'rgba(0,0,0,0.0)',\n                    }}\n                ></div>\n                {renderedInside ? (\n                    <div\n                        style={{\n                            position: 'sticky',\n                            left: 0,\n                            top: 0,\n                        }}\n                    >\n                        {renderedInside}\n                    </div>\n                ) : null}\n            </div>\n            {renderedOutside ? (\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: '100%',\n                        height: '100%',\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {renderedOutside}\n                </div>\n            ) : null}\n            <textarea\n                style={{ position: 'absolute', top: 0, left: 0, width: 1, height: 1, opacity: 0.01 }}\n                ref={textAreaRef}\n                autoComplete=\"off\"\n                autoCorrect=\"off\"\n                autoCapitalize=\"off\"\n                spellCheck=\"false\"\n                onFocus={(e) => e.target.select()}\n                tabIndex={0}\n                onKeyDown={onGridKeyDown}\n            ></textarea>\n            {editMode &&\n                (input !== undefined ? (\n                    input\n                ) : (\n                    <input\n                        {...inputProps}\n                        type=\"text\"\n                        onFocus={(e) => e.target.select()}\n                        onChange={(e) => setEditValue(e.target.value)}\n                    />\n                ))}\n        </div>\n    );\n});\n\nexport default Sheet;\n"],"names":["INITIAL_MAX_SCROLL","ORIGIN","ONE_ONE","NO_CELL","NO_SELECTION","NO_SELECTIONS","NO_CLICKABLES","NO_STYLE","MAX_SEARCHABLE_INDEX","MAX_XY","COLORS","selectionBorder","selectionBackground","gridLine","dragGhost","dropTarget","knobAreaBorder","headerBackground","headerText","headerActive","headerActiveText","headerSelected","headerSelectedText","SIZES","knobArea","headerWidth","headerHeight","minimumWidth","minimumHeight","resizeZone","scrollZone","scrollSpeed","DEFAULT_CELL_STYLE","textAlign","fontSize","marginRight","marginLeft","color","fontFamily","weight","fillColor","backgroundColor","DEFAULT_COLUMN_HEADER_STYLE","HEADER_ACTIVE_STYLE","HEADER_SELECTED_STYLE","ARROW_KEYS","clamp","x","min","max","Math","seq","n","s","d","Array","from","length","map","_","i","isInRange","isInRangeLeft","isInRangeCenter","addXY","a","b","subXY","mulXY","maxXY","clampXY","p","Infinity","getDirectionStep","direction","isSameXY","isSameSelection","a1","a2","b1","b2","isMaybeRowSelection","selection","left","right","isMaybeColumnSelection","top","bottom","isRowSelection","isColumnSelection","isCellSelection","isEmptySelection","isPointInsideSelection","point","normalizeSelection","y","createRowOrColumnProp","rowColProp","defaultValue","isArray","rowOrColIndex","undefined","createCellProp","cellProp","findApproxMaxEditDataIndex","editData","howManyEmpty","growthIncrement","growthIncrementFactor","allEmpty","yy","data","floor","xx","findInDisplayData","displayData","start","step","cell","first","firstFilled","cellX","cellY","useMouse","hitmapRef","editMode","sourceData","canSizeColumn","canSizeRow","canOrderColumn","canOrderRow","cellLayout","visibleCells","sheetStyle","onEdit","onCommit","onKnobAreaChange","onDragOffsetChange","onDropTargetChange","onSelectionChange","onInvalidateColumn","onInvalidateRow","onChange","onColumnOrderChange","onRowOrderChange","onCellWidthChange","onCellHeightChange","onRightClick","dontCommitEditOnSelectionChange","useState","hitTarget","setHitTarget","columnResize","setColumnResize","rowResize","setRowResize","columnDrag","setColumnDrag","rowDrag","setRowDrag","draggingKnob","setDraggingKnob","draggingSelection","setDraggingSelection","draggingRowSelection","setDraggingRowSelection","draggingColumnSelection","setDraggingColumnSelection","hideRowHeaders","hideColumnHeaders","cellToPixel","getVersion","version","knobPosition","useMemo","maxX","maxY","refState","ref","useRef","current","getMousePosition","useCallback","e","target","Element","rect","getBoundingClientRect","xy","clientX","clientY","getScrollPosition","scrollLeft","scrollTop","getMouseHit","hitmap","object","onPointerLeave","window","document","body","style","cursor","onPointerDown","columnToPixel","rowToPixel","pixelToCell","getIndentX","getIndentY","columns","rows","button","setPointerCapture","pointerId","minX","minY","selectedColumns","selectedRows","push","end","index","indices","size","scroll","anchor","edge","abs","asGroup","knobX","knobY","head","shiftKey","scrollTo","onPointerUp","pixelToColumn","pixelToRow","changes","parseKnobOperation","insideSelection","order","obj","onClick","onPointerMove","preventDefault","isDragging","currentScroll","newWidth","newHeight","anchorX","anchorY","headX","headY","xCellDiff","yCellDiff","shift","onDoubleClick","editCell","onContextMenu","event","mouseHandlers","kx1","ky1","kx2","ky2","sx1","sy1","sx2","sy2","fx1","fy1","fx2","fy2","srcY","value","source","srcX","useScroll","offset","maxScroll","onOffsetChange","onMaxScrollChange","absoluteToCell","cellToAbsolute","nudgeX","nudgeY","maxScrollX","maxScrollY","growX","growY","scrollToCell","element","view","freeze","callback","w","h","offsetX","offsetY","frozenX","frozenY","newX","newY","newOffset","setTimeout","scrollX","scrollY","useClipboardCopy","textAreaRef","useLayoutEffect","textArea","v","formatSelectionAsTSV","match","focus","preventScroll","select","activeElement","activeTagName","tagName","toLowerCase","contentEditable","useClipboardPaste","useEffect","onPaste","clipboardData","types","parsed","includes","pastedHtml","getData","parsePastedHtml","text","parsePastedText","addEventListener","removeEventListener","formatTSV","row","join","findTable","children","child","nodeName","maybeTable","html","div","createElement","innerHTML","trim","tableNode","tableChild","tr","td","str","textContent","replaceAll","split","cols","INITIAL_SIZE","makeCellLayout","indent","freezeX","freezeY","indentX","indentY","getBaseOriginFor","column","base","relative","getStart","adjust","getSize","columnToAbsolute","rowToAbsolute","pixelToIndex","pixel","layout","lookupIndex","frozen","pixelX","pixelY","absoluteToIndex","absoluteToColumn","absoluteToRow","getVisibleIndices","getVisibleCells","viewX","viewY","makeLayoutCache","sizer","offsets","makeIntMap","sizes","set","has","get","getOffset","j","tail","getEnd","last","mid","clearAfter","truncate","setSizer","initialSize","used","values","GROW","allocate","newUsed","Uint8Array","newValues","Uint32Array","copy","to","ensure","l","grow","round","shrink","getTail","setValue","getValue","hasValue","resolveSheetStyle","freezeColumns","freezeRows","hideGridlines","hideScrollBars","columnHeaderHeight","rowHeaderWidth","resolveCellStyle","optionalStyle","defaultStyle","applyAlignment","cellSize","imageWidth","alignment","renderSheet","context","cellStyle","secondarySelections","dragOffset","columnHeaders","columnHeaderStyle","dataOffset","canvas","width","height","clickables","resizeCanvas","clearRect","fillStyle","fillRect","selectionActive","rowSelectionActive","columnSelectionActive","resolveFrozenSelection","selected","hideKnob","strokeStyle","lineWidth","gridRight","gridBottom","drawGridLineX","beginPath","moveTo","lineTo","stroke","drawGridLineY","textBaseline","font","content","isActive","isSelected","renderCell","excelHeaderString","selectedStyle","activeStyle","strokeRect","secondarySelection","span","setLineDash","shiftX","shiftY","resolveSelection","cellContent","defaultCellStyle","xCoord","yCoord","cellWidth","cellHeight","finalStyle","save","clip","fillText","items","HTMLImageElement","finalX","horizontalAlign","drawImage","measure","measureText","actualBoundingBoxLeft","actualBoundingBoxAscent","actualBoundingBoxRight","actualBoundingBoxDescent","restore","lastInvisibleX","lastInvisibleY","devicePixelRatio","ratio","newCanvasWidth","newCanvasHeight","getContext","scale","num","t","String","fromCharCode","Sheet","forwardRef","props","canvasRef","overlayRef","setMaxScroll","setDataOffset","selectionProp","setSelection","setKnobArea","setDragOffset","setDropTarget","setEditCell","lastSelectionProp","setLastSelectionProp","editValue","setEditValue","arrowKeyCommitMode","setArrowKeyCommitMode","useResizeObserver","canvasWidth","canvasHeight","cellReadOnly","readOnly","editKeys","editCellX","editCellY","columnLayout","cacheLayout","rowLayout","onScrollChange","changeSelection","newSelection","toHead","overlay","onSelectionChanged","commitEditingCell","startEditingCell","editDataValue","val","setLastEditKey","onScroll","animationFrameId","requestAnimationFrame","cancelAnimationFrame","onKeyDown","key","onGridKeyDown","metaKey","ctrlKey","which","x1","y1","x2","y2","keyCode","lastEditKey","editTextPosition","editTextWidth","editTextHeight","editTextTextAlign","editKey","textX","textY","inputProps","autoFocus","position","padding","outline","border","input","inputComponent","overlayDivClassName","styles","sheetscroll","overlayDivStyles","overflow","borderBottom","canvasStyles","renderedInside","renderInside","renderedOutside","renderOutside","useImperativeHandle","React","className","pointerEvents","opacity","autoComplete","autoCorrect","autoCapitalize","spellCheck","onFocus","tabIndex","type"],"mappings":"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"}